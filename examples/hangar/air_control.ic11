pin Sensor d0;
pin Tank d1;
pin BypassDoor d2;
pin Lever d3;
pin Alarm d4;

const VentType = "StructurePoweredVentLarge";
const AtmosphereVentName = "Atmo Powered Vent Large";
const ExternalVentName = "Powered Vent Large";
const HangarDoorType = "StructureLargeHangerDoor";

const In = 1;
const Out = 0;

const MaxTankPressure = 45000;
const AtmospherePressure = 30;

const StateInit = 0; // (jumps to one of the other states after checking the state)
const StateOpen = 1;
const StateVacuuming = 2;
const StatePressurizing = 3;
const StateAtmosphere = 4;
const StateRemoveAtmosphere = 5;
const StateError = 6;

void Main()
{   
    // init
    DevicesOfType(VentType).WithName(ExternalVentName).Lock = true;
    DevicesOfType(VentType).WithName(AtmosphereVentName).Lock = true;
    DevicesOfType(HangarDoorType).Lock = true;
    BypassDoor.Lock = true;

    DevicesOfType(VentType).WithName(ExternalVentName).On = false;
    DevicesOfType(VentType).WithName(AtmosphereVentName).On = false;

    // operation
    var cooldown = 30;

    // incidence matrix
    // 0 - 1
    // 0 - 4
    // 1 - 2
    // 2 - 3
    // 3 - 4
    // 4 - 5
    // 5 - 1
    // 5 - 6 -- prevents tank pollution

    var state = 0;

    while(true){
        yield;
        Base.Setting = state;
        var atmosphereRequired = Lever.Setting;

        if (state == StateInit){ 
            var dirty = Sensor.RatioVolatiles > 0 | Sensor.RatioPollutant > 0;
            if (Sensor.Pressure > 0){
                if (dirty) {
                    state = StateOpen;
                } else {
                    state = StateAtmosphere;
                }
            } else {
                state = StateOpen;
            }
            continue;
        } 
        if (state == StateOpen){ 
            BypassDoor.Open = true;
            DevicesOfType(HangarDoorType).Open = true;

            if (atmosphereRequired){
                BypassDoor.Open = false;
                DevicesOfType(HangarDoorType).Open = false;

                state = StateVacuuming;
            }
            continue;
        } 
        if (state == StateVacuuming){ 
            DevicesOfType(VentType).WithName(ExternalVentName).Mode = In;
            DevicesOfType(VentType).WithName(ExternalVentName).On = true;
            Alarm.On = true;

            if (Sensor.Pressure > 0){
                cooldown = 30;
            } else {
                cooldown = cooldown - 1;
                if (cooldown == 0){
                    DevicesOfType(VentType).WithName(ExternalVentName).On = false;
                    
                    state = StatePressurizing;
                }
            }
            continue;
        }
        if (state == StatePressurizing){ 
            DevicesOfType(VentType).WithName(AtmosphereVentName).Mode = Out;
            DevicesOfType(VentType).WithName(AtmosphereVentName).On = true;

            if (Sensor.Pressure < AtmospherePressure){
                cooldown = 10;
            } else {
                cooldown = cooldown - 1;
                if (cooldown == 0){
                    DevicesOfType(VentType).WithName(AtmosphereVentName).On = false;
                    Alarm.On = false;
                    state = StateAtmosphere;
                }
            }
            continue;
        } 
        if (state == StateAtmosphere){
            if (!atmosphereRequired){
                state = StateRemoveAtmosphere;
            }
        } 
        if (state == StateRemoveAtmosphere){
            DevicesOfType(VentType).WithName(AtmosphereVentName).Mode = In;
            DevicesOfType(VentType).WithName(AtmosphereVentName).On = true;
            Alarm.On = true;

            var dirty = Sensor.RatioVolatiles > 0 | Sensor.RatioPollutant > 0;
            if (dirty){
                state = StateError;
                DevicesOfType(VentType).WithName(AtmosphereVentName).On = false;
                continue;
            }

            if (Tank.Pressure > MaxTankPressure){
                state = StateError;
                DevicesOfType(VentType).WithName(AtmosphereVentName).On = false;
                continue;
            }

            if (Sensor.Pressure > 0){
                cooldown = 30;
            } else {
                cooldown = cooldown - 1;
                if (cooldown == 0){
                    DevicesOfType(VentType).WithName(AtmosphereVentName).On = false;
                    Alarm.On = false;
                    state = StateOpen;
                }
            }
            continue;
        }
        if (state == StateError){
            DevicesOfType(VentType).WithName(AtmosphereVentName).On = false;
            DevicesOfType(VentType).WithName(ExternalVentName).On = false;
            Alarm.On = true;
            BypassDoor.Open = false;
            DevicesOfType(HangarDoorType).Open = false;
            continue;
    }
}

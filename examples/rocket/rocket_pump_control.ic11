pin Pump1 d0; // oxygen
pin PaInput1 d1;
pin PaOutput1 d2;
pin Pump2 d3; // volatiles
pin PaInput2 d4;
pin PaOutput2 d5;

// TotalMoles = Volume(Liters) * Pressure(kPa) / Temperature(K) / GasConst(8.314)
// PumpPerTick(moles) = PumpLitersSetting * InputTotalMoles / InputVolume(Liters)

const GasConstant = 8.314;
const MaxPressure = 55000;
const MinPower = 0.05;
const Engine = 360735; // DeviceWithId(Engine).Setting
const StartPressureRatio = 30650 / 50000;

void Main()
{
    while(true)
    {
        yield;

        var targetPressureOxy = 0;
        var targetPressureVol = 0;

        if (DeviceWithId(Engine).On) {
            var currentPressureRatio = Base.Setting;
            if (currentPressureRatio == 0){
                currentPressureRatio = StartPressureRatio;
            }

            if (currentPressureRatio < 1) {
                targetPressureOxy = currentPressureRatio * MaxPressure;
                targetPressureVol = MaxPressure;
            } else {
                targetPressureOxy = MaxPressure;
                targetPressureVol = MaxPressure / currentPressureRatio;
            }
        }

        ControlPump(0, 1, 2, targetPressureOxy);
        ControlPump(3, 4, 5, targetPressureVol);
    }
}


void ControlPump(pumpIdx, paInpIdx, paOutpIdx, targetPressure)
{
    Pins[paInpIdx].On = true;
    Pins[paOutpIdx].On = true;

    var delta = targetPressure - Pins[paOutpIdx].Pressure;
    var reverse = delta < 0;
    Pins[pumpIdx].Mode = reverse;

    var pumpPower = 0;
    if (reverse) {
        var transferMolesPerLiter = Pins[paOutpIdx].TotalMoles / Pins[paOutpIdx].Volume;
        var targetMoles = targetPressure / Pins[paOutpIdx].Pressure * Pins[paOutpIdx].TotalMoles;
        var targSubMoles = Pins[paOutpIdx].TotalMoles - targetMoles;

        pumpPower = targSubMoles / transferMolesPerLiter;
    } else {
        var transferMolesPerLiter = Pins[paInpIdx].TotalMoles / Pins[paInpIdx].Volume;

        var targetMoles = 0;

        if (Pins[paOutpIdx].Pressure > 0)
            targetMoles = targetPressure / Pins[paOutpIdx].Pressure * Pins[paOutpIdx].TotalMoles;
        else
            targetMoles = Pins[paOutpIdx].Volume * targetPressure / Pins[paInpIdx].Temperature / GasConstant;
        
        var targAddMoles = targetMoles - Pins[paOutpIdx].TotalMoles;    

        pumpPower = targAddMoles / transferMolesPerLiter;
    }

    if (pumpPower < MinPower)
    {
        Pins[pumpIdx].On = false;
        return;
    }

    Pins[pumpIdx].Setting = pumpPower;
    Pins[pumpIdx].On = true;
}
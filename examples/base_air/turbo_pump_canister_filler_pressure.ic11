pin Pump d0;
pin PaInput d1;
pin PaOutput d2;
pin CanisterHolder d3;

// TotalMoles = Volume(Liters) * Pressure(kPa) / Temperature(K) / GasConst(8.314)
// PumpPerTick(moles) = PumpLitersSetting * InputTotalMoles / InputVolume(Liters)

const gasConstant = 8.3144;

const targetPressure1 = 9500;
const targetPressure2 = 19500;

const minPower = 0.002;


void Main()
{
    for(;;yield)
    {
        var canisterVolume = 0;
        var canisterMoles = CanisterHolder.Quantity;

        if (CanisterHolder.Slots[0].Occupied)
            canisterVolume = CanisterHolder.Slots[0].Volume;

        var volumeOutp = PaOutput.Volume + canisterVolume;
        var volumeInp = PaInput.Volume;
        var pressInp = PaInput.Pressure;
        
        var molesInp = PaInput.TotalMoles;
        var molesOutp = PaOutput.TotalMoles + canisterMoles;

        var targetPressure = targetPressure1;

        if (CanisterHolder.Slots[0].OccupantHash == "ItemGasCanisterSmart")
            targetPressure = targetPressure2;

        var molesForPressure = volumeOutp * targetPressure / PaInput.Temperature / gasConstant;
        var molesToAdd = molesForPressure - molesOutp;

        var molesPerLiterForward = molesInp / volumeInp;
        var molesPerLiterReverse = PaOutput.TotalMoles / volumeOutp;

        var molesPerLiter = molesPerLiterForward;
        var mode = 0;

        if (molesToAdd < 0)
        {
            molesPerLiter = molesPerLiterReverse;
            mode = 1;
        }

        if (molesPerLiter == 0)
        {
            Pump.On = false;
            continue;
        }

        var power = abs(molesToAdd / molesPerLiter);

        if (power < minPower)
        {
            Pump.On = false;
            continue;
        }
        
        Pump.Setting = power;
        Pump.On = true;
        Pump.Mode = mode;
    }
}

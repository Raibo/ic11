//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ic11.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ic11Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, PINID=12, WHILE=13, IF=14, ELSE=15, YIELD=16, RETURN=17, 
		CONTINUE=18, BASE_DEVICE=19, VAR=20, CONST=21, ADD=22, SUB=23, MUL=24, 
		DIV=25, MOD=26, LT=27, GT=28, LE=29, GE=30, AND=31, OR=32, EQ=33, NE=34, 
		NEGATION=35, DEVICE_WITH_ID=36, BOOLEAN=37, IDENTIFIER=38, INTEGER=39, 
		REAL=40, WS=41, COMMENT=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "PINID", "WHILE", "IF", "ELSE", "YIELD", "RETURN", "CONTINUE", 
		"BASE_DEVICE", "VAR", "CONST", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", 
		"GT", "LE", "GE", "AND", "OR", "EQ", "NE", "NEGATION", "DEVICE_WITH_ID", 
		"BOOLEAN", "IDENTIFIER", "INTEGER", "REAL", "WS", "COMMENT"
	};


	public Ic11Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Ic11Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'pin'", "'void'", "'real'", "'('", "','", "')'", "'{'", 
		"'}'", "'.'", "'='", null, "'while'", "'if'", "'else'", "'yield'", "'return'", 
		"'continue'", "'Base'", "'var'", "'const'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'=='", "'!='", "'!'", 
		"'DeviceWithId'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"PINID", "WHILE", "IF", "ELSE", "YIELD", "RETURN", "CONTINUE", "BASE_DEVICE", 
		"VAR", "CONST", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", "GT", "LE", "GE", 
		"AND", "OR", "EQ", "NE", "NEGATION", "DEVICE_WITH_ID", "BOOLEAN", "IDENTIFIER", 
		"INTEGER", "REAL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ic11.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ic11Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,282,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,
		0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,
		1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,130,8,11,1,12,1,12,1,
		12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
		19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
		24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,
		30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,
		36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,239,8,36,1,37,1,37,5,37,243,8,37,
		10,37,12,37,246,9,37,1,38,4,38,249,8,38,11,38,12,38,250,1,39,5,39,254,
		8,39,10,39,12,39,257,9,39,1,39,1,39,4,39,261,8,39,11,39,12,39,262,1,40,
		4,40,266,8,40,11,40,12,40,267,1,40,1,40,1,41,1,41,1,41,1,41,5,41,276,8,
		41,10,41,12,41,279,9,41,1,41,1,41,0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,
		5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,
		10,13,13,32,32,2,0,10,10,13,13,294,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,91,1,0,0,0,7,96,1,0,0,0,9,101,1,0,
		0,0,11,103,1,0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,109,1,0,0,0,19,111,
		1,0,0,0,21,113,1,0,0,0,23,129,1,0,0,0,25,131,1,0,0,0,27,137,1,0,0,0,29,
		140,1,0,0,0,31,145,1,0,0,0,33,151,1,0,0,0,35,158,1,0,0,0,37,167,1,0,0,
		0,39,172,1,0,0,0,41,176,1,0,0,0,43,182,1,0,0,0,45,184,1,0,0,0,47,186,1,
		0,0,0,49,188,1,0,0,0,51,190,1,0,0,0,53,192,1,0,0,0,55,194,1,0,0,0,57,196,
		1,0,0,0,59,199,1,0,0,0,61,202,1,0,0,0,63,205,1,0,0,0,65,208,1,0,0,0,67,
		211,1,0,0,0,69,214,1,0,0,0,71,216,1,0,0,0,73,238,1,0,0,0,75,240,1,0,0,
		0,77,248,1,0,0,0,79,255,1,0,0,0,81,265,1,0,0,0,83,271,1,0,0,0,85,86,5,
		59,0,0,86,2,1,0,0,0,87,88,5,112,0,0,88,89,5,105,0,0,89,90,5,110,0,0,90,
		4,1,0,0,0,91,92,5,118,0,0,92,93,5,111,0,0,93,94,5,105,0,0,94,95,5,100,
		0,0,95,6,1,0,0,0,96,97,5,114,0,0,97,98,5,101,0,0,98,99,5,97,0,0,99,100,
		5,108,0,0,100,8,1,0,0,0,101,102,5,40,0,0,102,10,1,0,0,0,103,104,5,44,0,
		0,104,12,1,0,0,0,105,106,5,41,0,0,106,14,1,0,0,0,107,108,5,123,0,0,108,
		16,1,0,0,0,109,110,5,125,0,0,110,18,1,0,0,0,111,112,5,46,0,0,112,20,1,
		0,0,0,113,114,5,61,0,0,114,22,1,0,0,0,115,116,5,100,0,0,116,130,5,98,0,
		0,117,118,5,100,0,0,118,130,5,48,0,0,119,120,5,100,0,0,120,130,5,49,0,
		0,121,122,5,100,0,0,122,130,5,50,0,0,123,124,5,100,0,0,124,130,5,51,0,
		0,125,126,5,100,0,0,126,130,5,52,0,0,127,128,5,100,0,0,128,130,5,53,0,
		0,129,115,1,0,0,0,129,117,1,0,0,0,129,119,1,0,0,0,129,121,1,0,0,0,129,
		123,1,0,0,0,129,125,1,0,0,0,129,127,1,0,0,0,130,24,1,0,0,0,131,132,5,119,
		0,0,132,133,5,104,0,0,133,134,5,105,0,0,134,135,5,108,0,0,135,136,5,101,
		0,0,136,26,1,0,0,0,137,138,5,105,0,0,138,139,5,102,0,0,139,28,1,0,0,0,
		140,141,5,101,0,0,141,142,5,108,0,0,142,143,5,115,0,0,143,144,5,101,0,
		0,144,30,1,0,0,0,145,146,5,121,0,0,146,147,5,105,0,0,147,148,5,101,0,0,
		148,149,5,108,0,0,149,150,5,100,0,0,150,32,1,0,0,0,151,152,5,114,0,0,152,
		153,5,101,0,0,153,154,5,116,0,0,154,155,5,117,0,0,155,156,5,114,0,0,156,
		157,5,110,0,0,157,34,1,0,0,0,158,159,5,99,0,0,159,160,5,111,0,0,160,161,
		5,110,0,0,161,162,5,116,0,0,162,163,5,105,0,0,163,164,5,110,0,0,164,165,
		5,117,0,0,165,166,5,101,0,0,166,36,1,0,0,0,167,168,5,66,0,0,168,169,5,
		97,0,0,169,170,5,115,0,0,170,171,5,101,0,0,171,38,1,0,0,0,172,173,5,118,
		0,0,173,174,5,97,0,0,174,175,5,114,0,0,175,40,1,0,0,0,176,177,5,99,0,0,
		177,178,5,111,0,0,178,179,5,110,0,0,179,180,5,115,0,0,180,181,5,116,0,
		0,181,42,1,0,0,0,182,183,5,43,0,0,183,44,1,0,0,0,184,185,5,45,0,0,185,
		46,1,0,0,0,186,187,5,42,0,0,187,48,1,0,0,0,188,189,5,47,0,0,189,50,1,0,
		0,0,190,191,5,37,0,0,191,52,1,0,0,0,192,193,5,60,0,0,193,54,1,0,0,0,194,
		195,5,62,0,0,195,56,1,0,0,0,196,197,5,60,0,0,197,198,5,61,0,0,198,58,1,
		0,0,0,199,200,5,62,0,0,200,201,5,61,0,0,201,60,1,0,0,0,202,203,5,38,0,
		0,203,204,5,38,0,0,204,62,1,0,0,0,205,206,5,124,0,0,206,207,5,124,0,0,
		207,64,1,0,0,0,208,209,5,61,0,0,209,210,5,61,0,0,210,66,1,0,0,0,211,212,
		5,33,0,0,212,213,5,61,0,0,213,68,1,0,0,0,214,215,5,33,0,0,215,70,1,0,0,
		0,216,217,5,68,0,0,217,218,5,101,0,0,218,219,5,118,0,0,219,220,5,105,0,
		0,220,221,5,99,0,0,221,222,5,101,0,0,222,223,5,87,0,0,223,224,5,105,0,
		0,224,225,5,116,0,0,225,226,5,104,0,0,226,227,5,73,0,0,227,228,5,100,0,
		0,228,72,1,0,0,0,229,230,5,116,0,0,230,231,5,114,0,0,231,232,5,117,0,0,
		232,239,5,101,0,0,233,234,5,102,0,0,234,235,5,97,0,0,235,236,5,108,0,0,
		236,237,5,115,0,0,237,239,5,101,0,0,238,229,1,0,0,0,238,233,1,0,0,0,239,
		74,1,0,0,0,240,244,7,0,0,0,241,243,7,1,0,0,242,241,1,0,0,0,243,246,1,0,
		0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,76,1,0,0,0,246,244,1,0,0,0,247,
		249,7,2,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,251,1,
		0,0,0,251,78,1,0,0,0,252,254,7,2,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,
		253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,260,5,
		46,0,0,259,261,7,2,0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,
		262,263,1,0,0,0,263,80,1,0,0,0,264,266,7,3,0,0,265,264,1,0,0,0,266,267,
		1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,6,40,0,
		0,270,82,1,0,0,0,271,272,5,47,0,0,272,273,5,47,0,0,273,277,1,0,0,0,274,
		276,8,4,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,
		0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,6,41,0,0,281,84,1,0,0,0,
		9,0,129,238,244,250,255,262,267,277,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

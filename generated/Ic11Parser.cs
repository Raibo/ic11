//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ic11.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ic11Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, PINID=12, WHILE=13, IF=14, ELSE=15, YIELD=16, RETURN=17, 
		CONTINUE=18, BASE_DEVICE=19, VAR=20, CONST=21, ADD=22, SUB=23, MUL=24, 
		DIV=25, MOD=26, LT=27, GT=28, LE=29, GE=30, AND=31, OR=32, EQ=33, NE=34, 
		NEGATION=35, DEVICE_WITH_ID=36, BOOLEAN=37, IDENTIFIER=38, INTEGER=39, 
		REAL=40, WS=41, COMMENT=42;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_function = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_delimitedStatement = 5, RULE_yieldStatement = 6, 
		RULE_returnStatement = 7, RULE_returnValueStatement = 8, RULE_continueStatement = 9, 
		RULE_functionCallStatement = 10, RULE_undelimitedStatement = 11, RULE_whileStatement = 12, 
		RULE_ifStatement = 13, RULE_deviceWithIdAssignment = 14, RULE_memberAssignment = 15, 
		RULE_assignment = 16, RULE_variableDeclaration = 17, RULE_constantDeclaration = 18, 
		RULE_expression = 19;
	public static readonly string[] ruleNames = {
		"program", "declaration", "function", "block", "statement", "delimitedStatement", 
		"yieldStatement", "returnStatement", "returnValueStatement", "continueStatement", 
		"functionCallStatement", "undelimitedStatement", "whileStatement", "ifStatement", 
		"deviceWithIdAssignment", "memberAssignment", "assignment", "variableDeclaration", 
		"constantDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'pin'", "'void'", "'real'", "'('", "','", "')'", "'{'", 
		"'}'", "'.'", "'='", null, "'while'", "'if'", "'else'", "'yield'", "'return'", 
		"'continue'", "'Base'", "'var'", "'const'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'=='", "'!='", "'!'", 
		"'DeviceWithId'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"PINID", "WHILE", "IF", "ELSE", "YIELD", "RETURN", "CONTINUE", "BASE_DEVICE", 
		"VAR", "CONST", "ADD", "SUB", "MUL", "DIV", "MOD", "LT", "GT", "LE", "GE", 
		"AND", "OR", "EQ", "NE", "NEGATION", "DEVICE_WITH_ID", "BOOLEAN", "IDENTIFIER", 
		"INTEGER", "REAL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ic11.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ic11Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Ic11Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Ic11Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Ic11Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext[] constantDeclaration() {
			return GetRuleContexts<ConstantDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration(int i) {
			return GetRuleContext<ConstantDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2097180L) != 0)) {
				{
				State = 45;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 40;
					declaration();
					}
					break;
				case CONST:
					{
					{
					State = 41;
					constantDeclaration();
					State = 42;
					Match(T__0);
					}
					}
					break;
				case T__2:
				case T__3:
					{
					State = 44;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINID() { return GetToken(Ic11Parser.PINID, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(T__1);
			State = 53;
			Match(IDENTIFIER);
			State = 54;
			Match(PINID);
			State = 55;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken retType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_localctx.retType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
				_localctx.retType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 58;
			Match(IDENTIFIER);
			State = 59;
			Match(T__4);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 60;
				Match(IDENTIFIER);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 61;
					Match(T__5);
					State = 62;
					Match(IDENTIFIER);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 70;
			Match(T__6);
			State = 71;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(T__7);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 343601537024L) != 0)) {
				{
				{
				State = 74;
				statement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelimitedStatementContext delimitedStatement() {
			return GetRuleContext<DelimitedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndelimitedStatementContext undelimitedStatement() {
			return GetRuleContext<UndelimitedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				delimitedStatement();
				}
				break;
			case WHILE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				undelimitedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
			return GetRuleContext<DeviceWithIdAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAssignmentContext memberAssignment() {
			return GetRuleContext<MemberAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnValueStatementContext returnValueStatement() {
			return GetRuleContext<ReturnValueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public DelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelimitedStatementContext delimitedStatement() {
		DelimitedStatementContext _localctx = new DelimitedStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_delimitedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 86;
				deviceWithIdAssignment();
				}
				break;
			case 2:
				{
				State = 87;
				memberAssignment();
				}
				break;
			case 3:
				{
				State = 88;
				assignment();
				}
				break;
			case 4:
				{
				State = 89;
				yieldStatement();
				}
				break;
			case 5:
				{
				State = 90;
				returnValueStatement();
				}
				break;
			case 6:
				{
				State = 91;
				returnStatement();
				}
				break;
			case 7:
				{
				State = 92;
				continueStatement();
				}
				break;
			case 8:
				{
				State = 93;
				variableDeclaration();
				}
				break;
			case 9:
				{
				State = 94;
				constantDeclaration();
				}
				break;
			case 10:
				{
				State = 95;
				functionCallStatement();
				}
				break;
			}
			State = 98;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(Ic11Parser.YIELD, 0); }
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnValueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnValueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnValueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnValueStatementContext returnValueStatement() {
		ReturnValueStatementContext _localctx = new ReturnValueStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnValueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(RETURN);
			State = 105;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Ic11Parser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(IDENTIFIER);
			State = 110;
			Match(T__4);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164672430112L) != 0)) {
				{
				State = 111;
				expression(0);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 112;
					Match(T__5);
					State = 113;
					expression(0);
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 121;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public UndelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undelimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndelimitedStatementContext undelimitedStatement() {
		UndelimitedStatementContext _localctx = new UndelimitedStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_undelimitedStatement);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				whileStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Ic11Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(WHILE);
			State = 128;
			Match(T__4);
			State = 129;
			expression(0);
			State = 130;
			Match(T__6);
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 131;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				{
				State = 132;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Ic11Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Ic11Parser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(IF);
			State = 136;
			Match(T__4);
			State = 137;
			expression(0);
			State = 138;
			Match(T__6);
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 139;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				{
				State = 140;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 143;
				Match(ELSE);
				State = 146;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
					{
					State = 144;
					block();
					}
					break;
				case WHILE:
				case IF:
				case YIELD:
				case RETURN:
				case CONTINUE:
				case BASE_DEVICE:
				case VAR:
				case CONST:
				case DEVICE_WITH_ID:
				case IDENTIFIER:
					{
					State = 145;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIdAssignmentContext : ParserRuleContext {
		public ExpressionContext idExpr;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DeviceWithIdAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIdAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIdAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
		DeviceWithIdAssignmentContext _localctx = new DeviceWithIdAssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_deviceWithIdAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(DEVICE_WITH_ID);
			State = 151;
			Match(T__4);
			State = 152;
			_localctx.idExpr = expression(0);
			State = 153;
			Match(T__6);
			State = 154;
			Match(T__9);
			State = 155;
			Match(IDENTIFIER);
			State = 156;
			Match(T__10);
			State = 157;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAssignmentContext : ParserRuleContext {
		public IToken identifier;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public MemberAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAssignmentContext memberAssignment() {
		MemberAssignmentContext _localctx = new MemberAssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_localctx.identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
				_localctx.identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 160;
			Match(T__9);
			State = 161;
			_localctx.member = Match(IDENTIFIER);
			State = 162;
			Match(T__10);
			State = 163;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(IDENTIFIER);
			State = 166;
			Match(T__10);
			State = 167;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(VAR);
			State = 170;
			Match(IDENTIFIER);
			State = 171;
			Match(T__10);
			State = 172;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(Ic11Parser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_constantDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(CONST);
			State = 175;
			Match(IDENTIFIER);
			State = 176;
			Match(T__10);
			State = 177;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOpContext : ExpressionContext {
		public IToken op;
		public ExpressionContext operand;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(Ic11Parser.NEGATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		public UnaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public IdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessContext : ExpressionContext {
		public IToken identifier;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public MemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(Ic11Parser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Ic11Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(Ic11Parser.REAL, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeviceIdAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceIdAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceIdAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Ic11Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Ic11Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(Ic11Parser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Ic11Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Ic11Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Ic11Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Ic11Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Ic11Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Ic11Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(Ic11Parser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Ic11Parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(Ic11Parser.OR, 0); }
		public BinaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 180;
				((UnaryOpContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SUB || _la==NEGATION) ) {
					((UnaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 181;
				((UnaryOpContext)_localctx).operand = expression(12);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				Match(T__4);
				State = 183;
				expression(0);
				State = 184;
				Match(T__6);
				}
				break;
			case 3:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186;
				((LiteralContext)_localctx).type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1786706395136L) != 0)) ) {
					((LiteralContext)_localctx).type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187;
				Match(IDENTIFIER);
				State = 188;
				Match(T__4);
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164672430112L) != 0)) {
					{
					State = 189;
					expression(0);
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 190;
						Match(T__5);
						State = 191;
						expression(0);
						}
						}
						State = 196;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 199;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				_localctx = new MemberAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 201;
				((MemberAccessContext)_localctx).identifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
					((MemberAccessContext)_localctx).identifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 202;
				Match(T__9);
				State = 203;
				((MemberAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 7:
				{
				_localctx = new DeviceIdAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				Match(DEVICE_WITH_ID);
				State = 205;
				Match(T__4);
				State = 206;
				expression(0);
				State = 207;
				Match(T__6);
				State = 208;
				Match(T__9);
				State = 209;
				Match(IDENTIFIER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 228;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 214;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 215;
						((BinaryOpContext)_localctx).right = expression(12);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 217;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 218;
						((BinaryOpContext)_localctx).right = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 219;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 220;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 27783069696L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 221;
						((BinaryOpContext)_localctx).right = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 223;
						((BinaryOpContext)_localctx).op = Match(AND);
						State = 224;
						((BinaryOpContext)_localctx).right = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 225;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 226;
						((BinaryOpContext)_localctx).op = Match(OR);
						State = 227;
						((BinaryOpContext)_localctx).right = expression(8);
						}
						break;
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,234,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,1,0,
		5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,2,5,2,64,8,2,10,2,12,2,67,9,2,3,2,69,8,2,1,2,1,2,1,2,1,3,1,3,5,
		3,76,8,3,10,3,12,3,79,9,3,1,3,1,3,1,4,1,4,3,4,85,8,4,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,3,5,97,8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,
		9,1,9,1,10,1,10,1,10,1,10,1,10,5,10,115,8,10,10,10,12,10,118,9,10,3,10,
		120,8,10,1,10,1,10,1,11,1,11,3,11,126,8,11,1,12,1,12,1,12,1,12,1,12,1,
		12,3,12,134,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,142,8,13,1,13,1,13,
		1,13,3,13,147,8,13,3,13,149,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,
		17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,193,8,19,10,19,12,19,196,9,19,3,
		19,198,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		3,19,212,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,5,19,229,8,19,10,19,12,19,232,9,19,1,19,0,1,38,20,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,7,1,0,3,4,2,0,19,
		19,38,38,2,0,23,23,35,35,2,0,37,37,39,40,1,0,24,26,1,0,22,23,2,0,27,30,
		33,34,249,0,47,1,0,0,0,2,52,1,0,0,0,4,57,1,0,0,0,6,73,1,0,0,0,8,84,1,0,
		0,0,10,96,1,0,0,0,12,100,1,0,0,0,14,102,1,0,0,0,16,104,1,0,0,0,18,107,
		1,0,0,0,20,109,1,0,0,0,22,125,1,0,0,0,24,127,1,0,0,0,26,135,1,0,0,0,28,
		150,1,0,0,0,30,159,1,0,0,0,32,165,1,0,0,0,34,169,1,0,0,0,36,174,1,0,0,
		0,38,211,1,0,0,0,40,46,3,2,1,0,41,42,3,36,18,0,42,43,5,1,0,0,43,46,1,0,
		0,0,44,46,3,4,2,0,45,40,1,0,0,0,45,41,1,0,0,0,45,44,1,0,0,0,46,49,1,0,
		0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,0,
		0,1,51,1,1,0,0,0,52,53,5,2,0,0,53,54,5,38,0,0,54,55,5,12,0,0,55,56,5,1,
		0,0,56,3,1,0,0,0,57,58,7,0,0,0,58,59,5,38,0,0,59,68,5,5,0,0,60,65,5,38,
		0,0,61,62,5,6,0,0,62,64,5,38,0,0,63,61,1,0,0,0,64,67,1,0,0,0,65,63,1,0,
		0,0,65,66,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,68,60,1,0,0,0,68,69,1,0,
		0,0,69,70,1,0,0,0,70,71,5,7,0,0,71,72,3,6,3,0,72,5,1,0,0,0,73,77,5,8,0,
		0,74,76,3,8,4,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,
		0,78,80,1,0,0,0,79,77,1,0,0,0,80,81,5,9,0,0,81,7,1,0,0,0,82,85,3,10,5,
		0,83,85,3,22,11,0,84,82,1,0,0,0,84,83,1,0,0,0,85,9,1,0,0,0,86,97,3,28,
		14,0,87,97,3,30,15,0,88,97,3,32,16,0,89,97,3,12,6,0,90,97,3,16,8,0,91,
		97,3,14,7,0,92,97,3,18,9,0,93,97,3,34,17,0,94,97,3,36,18,0,95,97,3,20,
		10,0,96,86,1,0,0,0,96,87,1,0,0,0,96,88,1,0,0,0,96,89,1,0,0,0,96,90,1,0,
		0,0,96,91,1,0,0,0,96,92,1,0,0,0,96,93,1,0,0,0,96,94,1,0,0,0,96,95,1,0,
		0,0,97,98,1,0,0,0,98,99,5,1,0,0,99,11,1,0,0,0,100,101,5,16,0,0,101,13,
		1,0,0,0,102,103,5,17,0,0,103,15,1,0,0,0,104,105,5,17,0,0,105,106,3,38,
		19,0,106,17,1,0,0,0,107,108,5,18,0,0,108,19,1,0,0,0,109,110,5,38,0,0,110,
		119,5,5,0,0,111,116,3,38,19,0,112,113,5,6,0,0,113,115,3,38,19,0,114,112,
		1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,120,1,0,0,
		0,118,116,1,0,0,0,119,111,1,0,0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,
		122,5,7,0,0,122,21,1,0,0,0,123,126,3,24,12,0,124,126,3,26,13,0,125,123,
		1,0,0,0,125,124,1,0,0,0,126,23,1,0,0,0,127,128,5,13,0,0,128,129,5,5,0,
		0,129,130,3,38,19,0,130,133,5,7,0,0,131,134,3,6,3,0,132,134,3,8,4,0,133,
		131,1,0,0,0,133,132,1,0,0,0,134,25,1,0,0,0,135,136,5,14,0,0,136,137,5,
		5,0,0,137,138,3,38,19,0,138,141,5,7,0,0,139,142,3,6,3,0,140,142,3,8,4,
		0,141,139,1,0,0,0,141,140,1,0,0,0,142,148,1,0,0,0,143,146,5,15,0,0,144,
		147,3,6,3,0,145,147,3,8,4,0,146,144,1,0,0,0,146,145,1,0,0,0,147,149,1,
		0,0,0,148,143,1,0,0,0,148,149,1,0,0,0,149,27,1,0,0,0,150,151,5,36,0,0,
		151,152,5,5,0,0,152,153,3,38,19,0,153,154,5,7,0,0,154,155,5,10,0,0,155,
		156,5,38,0,0,156,157,5,11,0,0,157,158,3,38,19,0,158,29,1,0,0,0,159,160,
		7,1,0,0,160,161,5,10,0,0,161,162,5,38,0,0,162,163,5,11,0,0,163,164,3,38,
		19,0,164,31,1,0,0,0,165,166,5,38,0,0,166,167,5,11,0,0,167,168,3,38,19,
		0,168,33,1,0,0,0,169,170,5,20,0,0,170,171,5,38,0,0,171,172,5,11,0,0,172,
		173,3,38,19,0,173,35,1,0,0,0,174,175,5,21,0,0,175,176,5,38,0,0,176,177,
		5,11,0,0,177,178,3,38,19,0,178,37,1,0,0,0,179,180,6,19,-1,0,180,181,7,
		2,0,0,181,212,3,38,19,12,182,183,5,5,0,0,183,184,3,38,19,0,184,185,5,7,
		0,0,185,212,1,0,0,0,186,212,7,3,0,0,187,188,5,38,0,0,188,197,5,5,0,0,189,
		194,3,38,19,0,190,191,5,6,0,0,191,193,3,38,19,0,192,190,1,0,0,0,193,196,
		1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,
		0,197,189,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,199,212,5,7,0,0,200,
		212,5,38,0,0,201,202,7,1,0,0,202,203,5,10,0,0,203,212,5,38,0,0,204,205,
		5,36,0,0,205,206,5,5,0,0,206,207,3,38,19,0,207,208,5,7,0,0,208,209,5,10,
		0,0,209,210,5,38,0,0,210,212,1,0,0,0,211,179,1,0,0,0,211,182,1,0,0,0,211,
		186,1,0,0,0,211,187,1,0,0,0,211,200,1,0,0,0,211,201,1,0,0,0,211,204,1,
		0,0,0,212,230,1,0,0,0,213,214,10,11,0,0,214,215,7,4,0,0,215,229,3,38,19,
		12,216,217,10,10,0,0,217,218,7,5,0,0,218,229,3,38,19,11,219,220,10,9,0,
		0,220,221,7,6,0,0,221,229,3,38,19,10,222,223,10,8,0,0,223,224,5,31,0,0,
		224,229,3,38,19,9,225,226,10,7,0,0,226,227,5,32,0,0,227,229,3,38,19,8,
		228,213,1,0,0,0,228,216,1,0,0,0,228,219,1,0,0,0,228,222,1,0,0,0,228,225,
		1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,39,1,0,0,0,
		232,230,1,0,0,0,19,45,47,65,68,77,84,96,116,119,125,133,141,146,148,194,
		197,211,228,230
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ic11.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ic11Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, PINID=14, WHILE=15, IF=16, ELSE=17, 
		YIELD=18, RETURN=19, CONTINUE=20, BREAK=21, BASE_DEVICE=22, VAR=23, CONST=24, 
		ADD=25, SUB=26, MUL=27, DIV=28, MOD=29, BITWISE_NOT=30, SHIFTL=31, SHIFTR=32, 
		LT=33, GT=34, LE=35, GE=36, AND=37, OR=38, XOR=39, EQ=40, NE=41, NEGATION=42, 
		PINS=43, SLOTS=44, REAGENTS=45, STACK=46, DEVICE_WITH_ID=47, DEVICES_OF_TYPE=48, 
		WITH_NAME=49, DIRECT_UNARY_OPERATOR=50, DIRECT_BINARY_OPERATOR=51, BOOLEAN=52, 
		IDENTIFIER=53, INTEGER=54, STRING_LITERAL=55, REAL=56, WS=57, LINE_COMMENT=58, 
		MULTILINE_COMMENT=59;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_function = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_delimitedStatement = 5, RULE_yieldStatement = 6, 
		RULE_returnStatement = 7, RULE_returnValueStatement = 8, RULE_continueStatement = 9, 
		RULE_breakStatement = 10, RULE_functionCallStatement = 11, RULE_undelimitedStatement = 12, 
		RULE_whileStatement = 13, RULE_ifStatement = 14, RULE_deviceWithIdAssignment = 15, 
		RULE_deviceWithIdExtendedAssignment = 16, RULE_batchAssignment = 17, RULE_memberExtendedAssignment = 18, 
		RULE_memberAssignment = 19, RULE_deviceWithIndexExtendedAssignment = 20, 
		RULE_deviceWithIndexAssignment = 21, RULE_assignment = 22, RULE_variableDeclaration = 23, 
		RULE_constantDeclaration = 24, RULE_arrayDeclaration = 25, RULE_arrayAssignment = 26, 
		RULE_expression = 27;
	public static readonly string[] ruleNames = {
		"program", "declaration", "function", "block", "statement", "delimitedStatement", 
		"yieldStatement", "returnStatement", "returnValueStatement", "continueStatement", 
		"breakStatement", "functionCallStatement", "undelimitedStatement", "whileStatement", 
		"ifStatement", "deviceWithIdAssignment", "deviceWithIdExtendedAssignment", 
		"batchAssignment", "memberExtendedAssignment", "memberAssignment", "deviceWithIndexExtendedAssignment", 
		"deviceWithIndexAssignment", "assignment", "variableDeclaration", "constantDeclaration", 
		"arrayDeclaration", "arrayAssignment", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'pin'", "'void'", "'real'", "'('", "','", "')'", "'{'", 
		"'}'", "'.'", "'='", "'['", "']'", null, "'while'", "'if'", "'else'", 
		"'yield'", "'return'", "'continue'", "'break'", "'Base'", "'var'", "'const'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'<<'", "'>>'", "'<'", "'>'", 
		"'<='", "'>='", "'&'", "'|'", "'^'", "'=='", "'!='", "'!'", "'Pins'", 
		"'Slots'", "'Reagents'", "'Stack'", "'DeviceWithId'", "'DevicesOfType'", 
		"'WithName'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "PINID", "WHILE", "IF", "ELSE", "YIELD", "RETURN", "CONTINUE", 
		"BREAK", "BASE_DEVICE", "VAR", "CONST", "ADD", "SUB", "MUL", "DIV", "MOD", 
		"BITWISE_NOT", "SHIFTL", "SHIFTR", "LT", "GT", "LE", "GE", "AND", "OR", 
		"XOR", "EQ", "NE", "NEGATION", "PINS", "SLOTS", "REAGENTS", "STACK", "DEVICE_WITH_ID", 
		"DEVICES_OF_TYPE", "WITH_NAME", "DIRECT_UNARY_OPERATOR", "DIRECT_BINARY_OPERATOR", 
		"BOOLEAN", "IDENTIFIER", "INTEGER", "STRING_LITERAL", "REAL", "WS", "LINE_COMMENT", 
		"MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ic11.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ic11Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Ic11Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Ic11Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Ic11Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext[] constantDeclaration() {
			return GetRuleContexts<ConstantDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration(int i) {
			return GetRuleContext<ConstantDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16777244L) != 0)) {
				{
				State = 61;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 56;
					declaration();
					}
					break;
				case CONST:
					{
					{
					State = 57;
					constantDeclaration();
					State = 58;
					Match(T__0);
					}
					}
					break;
				case T__2:
				case T__3:
					{
					State = 60;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 66;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINID() { return GetToken(Ic11Parser.PINID, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__1);
			State = 69;
			Match(IDENTIFIER);
			State = 70;
			Match(PINID);
			State = 71;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken retType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_localctx.retType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
				_localctx.retType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 74;
			Match(IDENTIFIER);
			State = 75;
			Match(T__4);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 76;
				Match(IDENTIFIER);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 77;
					Match(T__5);
					State = 78;
					Match(IDENTIFIER);
					}
					}
					State = 83;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 86;
			Match(T__6);
			State = 87;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(T__7);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9438207846219776L) != 0)) {
				{
				{
				State = 90;
				statement();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelimitedStatementContext delimitedStatement() {
			return GetRuleContext<DelimitedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndelimitedStatementContext undelimitedStatement() {
			return GetRuleContext<UndelimitedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case PINS:
			case DEVICE_WITH_ID:
			case DEVICES_OF_TYPE:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				delimitedStatement();
				}
				break;
			case WHILE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				undelimitedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIdExtendedAssignmentContext deviceWithIdExtendedAssignment() {
			return GetRuleContext<DeviceWithIdExtendedAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
			return GetRuleContext<DeviceWithIdAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BatchAssignmentContext batchAssignment() {
			return GetRuleContext<BatchAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIndexExtendedAssignmentContext deviceWithIndexExtendedAssignment() {
			return GetRuleContext<DeviceWithIndexExtendedAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIndexAssignmentContext deviceWithIndexAssignment() {
			return GetRuleContext<DeviceWithIndexAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberExtendedAssignmentContext memberExtendedAssignment() {
			return GetRuleContext<MemberExtendedAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAssignmentContext memberAssignment() {
			return GetRuleContext<MemberAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnValueStatementContext returnValueStatement() {
			return GetRuleContext<ReturnValueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		public DelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelimitedStatementContext delimitedStatement() {
		DelimitedStatementContext _localctx = new DelimitedStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_delimitedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 102;
				deviceWithIdExtendedAssignment();
				}
				break;
			case 2:
				{
				State = 103;
				deviceWithIdAssignment();
				}
				break;
			case 3:
				{
				State = 104;
				batchAssignment();
				}
				break;
			case 4:
				{
				State = 105;
				deviceWithIndexExtendedAssignment();
				}
				break;
			case 5:
				{
				State = 106;
				deviceWithIndexAssignment();
				}
				break;
			case 6:
				{
				State = 107;
				memberExtendedAssignment();
				}
				break;
			case 7:
				{
				State = 108;
				memberAssignment();
				}
				break;
			case 8:
				{
				State = 109;
				assignment();
				}
				break;
			case 9:
				{
				State = 110;
				yieldStatement();
				}
				break;
			case 10:
				{
				State = 111;
				returnValueStatement();
				}
				break;
			case 11:
				{
				State = 112;
				returnStatement();
				}
				break;
			case 12:
				{
				State = 113;
				continueStatement();
				}
				break;
			case 13:
				{
				State = 114;
				breakStatement();
				}
				break;
			case 14:
				{
				State = 115;
				variableDeclaration();
				}
				break;
			case 15:
				{
				State = 116;
				constantDeclaration();
				}
				break;
			case 16:
				{
				State = 117;
				functionCallStatement();
				}
				break;
			case 17:
				{
				State = 118;
				arrayDeclaration();
				}
				break;
			case 18:
				{
				State = 119;
				arrayAssignment();
				}
				break;
			}
			State = 122;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(Ic11Parser.YIELD, 0); }
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnValueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnValueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnValueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnValueStatementContext returnValueStatement() {
		ReturnValueStatementContext _localctx = new ReturnValueStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnValueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(RETURN);
			State = 129;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Ic11Parser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(Ic11Parser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(IDENTIFIER);
			State = 136;
			Match(T__4);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 143424695918657568L) != 0)) {
				{
				State = 137;
				expression(0);
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 138;
					Match(T__5);
					State = 139;
					expression(0);
					}
					}
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 147;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public UndelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undelimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndelimitedStatementContext undelimitedStatement() {
		UndelimitedStatementContext _localctx = new UndelimitedStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_undelimitedStatement);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				whileStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Ic11Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(WHILE);
			State = 154;
			Match(T__4);
			State = 155;
			expression(0);
			State = 156;
			Match(T__6);
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 157;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case PINS:
			case DEVICE_WITH_ID:
			case DEVICES_OF_TYPE:
			case IDENTIFIER:
				{
				State = 158;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Ic11Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Ic11Parser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(IF);
			State = 162;
			Match(T__4);
			State = 163;
			expression(0);
			State = 164;
			Match(T__6);
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 165;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case PINS:
			case DEVICE_WITH_ID:
			case DEVICES_OF_TYPE:
			case IDENTIFIER:
				{
				State = 166;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 169;
				Match(ELSE);
				State = 172;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
					{
					State = 170;
					block();
					}
					break;
				case WHILE:
				case IF:
				case YIELD:
				case RETURN:
				case CONTINUE:
				case BREAK:
				case BASE_DEVICE:
				case VAR:
				case CONST:
				case PINS:
				case DEVICE_WITH_ID:
				case DEVICES_OF_TYPE:
				case IDENTIFIER:
					{
					State = 171;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIdAssignmentContext : ParserRuleContext {
		public ExpressionContext deviceIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceWithIdAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIdAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIdAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
		DeviceWithIdAssignmentContext _localctx = new DeviceWithIdAssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_deviceWithIdAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(DEVICE_WITH_ID);
			State = 177;
			Match(T__4);
			State = 178;
			_localctx.deviceIdxExpr = expression(0);
			State = 179;
			Match(T__6);
			State = 180;
			Match(T__9);
			State = 181;
			_localctx.member = Match(IDENTIFIER);
			State = 182;
			Match(T__10);
			State = 183;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIdExtendedAssignmentContext : ParserRuleContext {
		public ExpressionContext deviceIdxExpr;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceWithIdExtendedAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIdExtendedAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIdExtendedAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIdExtendedAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIdExtendedAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIdExtendedAssignmentContext deviceWithIdExtendedAssignment() {
		DeviceWithIdExtendedAssignmentContext _localctx = new DeviceWithIdExtendedAssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_deviceWithIdExtendedAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(DEVICE_WITH_ID);
			State = 186;
			Match(T__4);
			State = 187;
			_localctx.deviceIdxExpr = expression(0);
			State = 188;
			Match(T__6);
			State = 189;
			Match(T__9);
			State = 190;
			_localctx.prop = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
				_localctx.prop = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 191;
			Match(T__11);
			State = 192;
			_localctx.targetIdxExpr = expression(0);
			State = 193;
			Match(T__12);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 194;
				Match(T__9);
				State = 195;
				_localctx.member = Match(IDENTIFIER);
				}
			}

			State = 198;
			Match(T__10);
			State = 199;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BatchAssignmentContext : ParserRuleContext {
		public ExpressionContext deviceTypeHashExpr;
		public ExpressionContext deviceNameHashExpr;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICES_OF_TYPE() { return GetToken(Ic11Parser.DEVICES_OF_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_NAME() { return GetToken(Ic11Parser.WITH_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		public BatchAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_batchAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBatchAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBatchAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatchAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BatchAssignmentContext batchAssignment() {
		BatchAssignmentContext _localctx = new BatchAssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_batchAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(DEVICES_OF_TYPE);
			State = 202;
			Match(T__4);
			State = 203;
			_localctx.deviceTypeHashExpr = expression(0);
			State = 204;
			Match(T__6);
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 205;
				Match(T__9);
				State = 206;
				Match(WITH_NAME);
				State = 207;
				Match(T__4);
				State = 208;
				_localctx.deviceNameHashExpr = expression(0);
				State = 209;
				Match(T__6);
				}
				break;
			}
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 213;
				Match(T__9);
				State = 214;
				_localctx.prop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
					_localctx.prop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 215;
				Match(T__11);
				State = 216;
				_localctx.targetIdxExpr = expression(0);
				State = 217;
				Match(T__12);
				}
				break;
			}
			State = 221;
			Match(T__9);
			State = 222;
			_localctx.member = Match(IDENTIFIER);
			State = 223;
			Match(T__10);
			State = 224;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberExtendedAssignmentContext : ParserRuleContext {
		public IToken identifier;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		public MemberExtendedAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberExtendedAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberExtendedAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberExtendedAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExtendedAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberExtendedAssignmentContext memberExtendedAssignment() {
		MemberExtendedAssignmentContext _localctx = new MemberExtendedAssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_memberExtendedAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_localctx.identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
				_localctx.identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 227;
			Match(T__9);
			State = 228;
			_localctx.prop = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
				_localctx.prop = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 229;
			Match(T__11);
			State = 230;
			_localctx.targetIdxExpr = expression(0);
			State = 231;
			Match(T__12);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 232;
				Match(T__9);
				State = 233;
				_localctx.member = Match(IDENTIFIER);
				}
			}

			State = 236;
			Match(T__10);
			State = 237;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAssignmentContext : ParserRuleContext {
		public IToken identifier;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public MemberAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAssignmentContext memberAssignment() {
		MemberAssignmentContext _localctx = new MemberAssignmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_memberAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_localctx.identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
				_localctx.identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 240;
			Match(T__9);
			State = 241;
			_localctx.member = Match(IDENTIFIER);
			State = 242;
			Match(T__10);
			State = 243;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIndexExtendedAssignmentContext : ParserRuleContext {
		public ExpressionContext deviceIdxExpr;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceWithIndexExtendedAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIndexExtendedAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIndexExtendedAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIndexExtendedAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIndexExtendedAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIndexExtendedAssignmentContext deviceWithIndexExtendedAssignment() {
		DeviceWithIndexExtendedAssignmentContext _localctx = new DeviceWithIndexExtendedAssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_deviceWithIndexExtendedAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(PINS);
			State = 246;
			Match(T__11);
			State = 247;
			_localctx.deviceIdxExpr = expression(0);
			State = 248;
			Match(T__12);
			State = 249;
			Match(T__9);
			State = 250;
			_localctx.prop = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
				_localctx.prop = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 251;
			Match(T__11);
			State = 252;
			_localctx.targetIdxExpr = expression(0);
			State = 253;
			Match(T__12);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 254;
				Match(T__9);
				State = 255;
				_localctx.member = Match(IDENTIFIER);
				}
			}

			State = 258;
			Match(T__10);
			State = 259;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIndexAssignmentContext : ParserRuleContext {
		public ExpressionContext deviceIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceWithIndexAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIndexAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIndexAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIndexAssignmentContext deviceWithIndexAssignment() {
		DeviceWithIndexAssignmentContext _localctx = new DeviceWithIndexAssignmentContext(Context, State);
		EnterRule(_localctx, 42, RULE_deviceWithIndexAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(PINS);
			State = 262;
			Match(T__11);
			State = 263;
			_localctx.deviceIdxExpr = expression(0);
			State = 264;
			Match(T__12);
			State = 265;
			Match(T__9);
			State = 266;
			_localctx.member = Match(IDENTIFIER);
			State = 267;
			Match(T__10);
			State = 268;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(IDENTIFIER);
			State = 271;
			Match(T__10);
			State = 272;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(VAR);
			State = 275;
			Match(IDENTIFIER);
			State = 276;
			Match(T__10);
			State = 277;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(Ic11Parser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_constantDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(CONST);
			State = 280;
			Match(IDENTIFIER);
			State = 281;
			Match(T__10);
			State = 282;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
	 
		public ArrayDeclarationContext() { }
		public virtual void CopyFrom(ArrayDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArraySizeDeclarationContext : ArrayDeclarationContext {
		public ExpressionContext sizeExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArraySizeDeclarationContext(ArrayDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArraySizeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArraySizeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySizeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayListDeclarationContext : ArrayDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayListDeclarationContext(ArrayDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArrayListDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArrayListDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayListDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayDeclaration);
		int _la;
		try {
			int _alt;
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new ArraySizeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 284;
				Match(VAR);
				State = 285;
				Match(IDENTIFIER);
				State = 286;
				Match(T__10);
				State = 287;
				Match(T__11);
				State = 288;
				((ArraySizeDeclarationContext)_localctx).sizeExpr = expression(0);
				State = 289;
				Match(T__12);
				}
				break;
			case 2:
				_localctx = new ArrayListDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 291;
				Match(VAR);
				State = 292;
				Match(IDENTIFIER);
				State = 293;
				Match(T__10);
				State = 294;
				Match(T__7);
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 143424695918657568L) != 0)) {
					{
					State = 295;
					expression(0);
					State = 300;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 296;
							Match(T__5);
							State = 297;
							expression(0);
							}
							} 
						}
						State = 302;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
					}
					}
				}

				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 305;
					Match(T__5);
					}
				}

				State = 308;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		public ExpressionContext indexExpr;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 52, RULE_arrayAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			Match(IDENTIFIER);
			State = 312;
			Match(T__11);
			State = 313;
			_localctx.indexExpr = expression(0);
			State = 314;
			Match(T__12);
			State = 315;
			Match(T__10);
			State = 316;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryOpContext : ExpressionContext {
		public IToken op;
		public ExpressionContext operand;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_UNARY_OPERATOR() { return GetToken(Ic11Parser.DIRECT_UNARY_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(Ic11Parser.NEGATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(Ic11Parser.BITWISE_NOT, 0); }
		public UnaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BatchAccessContext : ExpressionContext {
		public ExpressionContext deviceTypeHashExpr;
		public ExpressionContext deviceNameHashExpr;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		public IToken batchMode;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICES_OF_TYPE() { return GetToken(Ic11Parser.DEVICES_OF_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_NAME() { return GetToken(Ic11Parser.WITH_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		public BatchAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBatchAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBatchAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBatchAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtendedMemberAccessContext : ExpressionContext {
		public IToken identifier;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		public ExtendedMemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterExtendedMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitExtendedMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public IdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessContext : ExpressionContext {
		public IToken identifier;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public MemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtendedDeviceIdAccessContext : ExpressionContext {
		public ExpressionContext deviceIdxExpr;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public ExtendedDeviceIdAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterExtendedDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitExtendedDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedDeviceIdAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(Ic11Parser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Ic11Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(Ic11Parser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(Ic11Parser.STRING_LITERAL, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeviceIndexAccessContext : ExpressionContext {
		public ExpressionContext deviceIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceIndexAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeviceIdAccessContext : ExpressionContext {
		public ExpressionContext deviceIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceIdAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceIdAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayElementAccessContext : ExpressionContext {
		public ExpressionContext indexExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArrayElementAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArrayElementAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtendedDeviceIndexAccessContext : ExpressionContext {
		public ExpressionContext deviceIdxExpr;
		public IToken prop;
		public ExpressionContext targetIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAGENTS() { return GetToken(Ic11Parser.REAGENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACK() { return GetToken(Ic11Parser.STACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public ExtendedDeviceIndexAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterExtendedDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitExtendedDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedDeviceIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT_BINARY_OPERATOR() { return GetToken(Ic11Parser.DIRECT_BINARY_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTL() { return GetToken(Ic11Parser.SHIFTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFTR() { return GetToken(Ic11Parser.SHIFTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Ic11Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Ic11Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(Ic11Parser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Ic11Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Ic11Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Ic11Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Ic11Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Ic11Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Ic11Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(Ic11Parser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Ic11Parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(Ic11Parser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(Ic11Parser.XOR, 0); }
		public BinaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 319;
				((UnaryOpContext)_localctx).op = Match(DIRECT_UNARY_OPERATOR);
				State = 320;
				Match(T__4);
				State = 321;
				((UnaryOpContext)_localctx).operand = expression(0);
				State = 322;
				Match(T__6);
				}
				break;
			case 2:
				{
				_localctx = new BinaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 324;
				((BinaryOpContext)_localctx).op = Match(DIRECT_BINARY_OPERATOR);
				State = 325;
				Match(T__4);
				State = 326;
				((BinaryOpContext)_localctx).left = expression(0);
				State = 327;
				Match(T__5);
				State = 328;
				((BinaryOpContext)_localctx).right = expression(0);
				State = 329;
				Match(T__6);
				}
				break;
			case 3:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 331;
				((UnaryOpContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4399187361792L) != 0)) ) {
					((UnaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 332;
				((UnaryOpContext)_localctx).operand = expression(19);
				}
				break;
			case 4:
				{
				_localctx = new ParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 333;
				Match(T__4);
				State = 334;
				expression(0);
				State = 335;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337;
				((LiteralContext)_localctx).type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 130604389193744384L) != 0)) ) {
					((LiteralContext)_localctx).type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 338;
				Match(IDENTIFIER);
				State = 339;
				Match(T__4);
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 143424695918657568L) != 0)) {
					{
					State = 340;
					expression(0);
					State = 345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 341;
						Match(T__5);
						State = 342;
						expression(0);
						}
						}
						State = 347;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 350;
				Match(T__6);
				}
				break;
			case 7:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 351;
				Match(IDENTIFIER);
				}
				break;
			case 8:
				{
				_localctx = new MemberAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 352;
				((MemberAccessContext)_localctx).identifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
					((MemberAccessContext)_localctx).identifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 353;
				Match(T__9);
				State = 354;
				((MemberAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 9:
				{
				_localctx = new ExtendedMemberAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 355;
				((ExtendedMemberAccessContext)_localctx).identifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
					((ExtendedMemberAccessContext)_localctx).identifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 356;
				Match(T__9);
				State = 357;
				((ExtendedMemberAccessContext)_localctx).prop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
					((ExtendedMemberAccessContext)_localctx).prop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 358;
				Match(T__11);
				State = 359;
				((ExtendedMemberAccessContext)_localctx).targetIdxExpr = expression(0);
				State = 360;
				Match(T__12);
				State = 363;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 361;
					Match(T__9);
					State = 362;
					((ExtendedMemberAccessContext)_localctx).member = Match(IDENTIFIER);
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new DeviceIndexAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365;
				Match(PINS);
				State = 366;
				Match(T__11);
				State = 367;
				((DeviceIndexAccessContext)_localctx).deviceIdxExpr = expression(0);
				State = 368;
				Match(T__12);
				State = 369;
				Match(T__9);
				State = 370;
				((DeviceIndexAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 11:
				{
				_localctx = new ExtendedDeviceIndexAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 372;
				Match(PINS);
				State = 373;
				Match(T__11);
				State = 374;
				((ExtendedDeviceIndexAccessContext)_localctx).deviceIdxExpr = expression(0);
				State = 375;
				Match(T__12);
				State = 376;
				Match(T__9);
				State = 377;
				((ExtendedDeviceIndexAccessContext)_localctx).prop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
					((ExtendedDeviceIndexAccessContext)_localctx).prop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 378;
				Match(T__11);
				State = 379;
				((ExtendedDeviceIndexAccessContext)_localctx).targetIdxExpr = expression(0);
				State = 380;
				Match(T__12);
				State = 383;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 381;
					Match(T__9);
					State = 382;
					((ExtendedDeviceIndexAccessContext)_localctx).member = Match(IDENTIFIER);
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new DeviceIdAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 385;
				Match(DEVICE_WITH_ID);
				State = 386;
				Match(T__4);
				State = 387;
				((DeviceIdAccessContext)_localctx).deviceIdxExpr = expression(0);
				State = 388;
				Match(T__6);
				State = 389;
				Match(T__9);
				State = 390;
				((DeviceIdAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 13:
				{
				_localctx = new ExtendedDeviceIdAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				Match(DEVICE_WITH_ID);
				State = 393;
				Match(T__4);
				State = 394;
				((ExtendedDeviceIdAccessContext)_localctx).deviceIdxExpr = expression(0);
				State = 395;
				Match(T__6);
				State = 396;
				Match(T__9);
				State = 397;
				((ExtendedDeviceIdAccessContext)_localctx).prop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
					((ExtendedDeviceIdAccessContext)_localctx).prop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 398;
				Match(T__11);
				State = 399;
				((ExtendedDeviceIdAccessContext)_localctx).targetIdxExpr = expression(0);
				State = 400;
				Match(T__12);
				State = 403;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 401;
					Match(T__9);
					State = 402;
					((ExtendedDeviceIdAccessContext)_localctx).member = Match(IDENTIFIER);
					}
					break;
				}
				}
				break;
			case 14:
				{
				_localctx = new BatchAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 405;
				Match(DEVICES_OF_TYPE);
				State = 406;
				Match(T__4);
				State = 407;
				((BatchAccessContext)_localctx).deviceTypeHashExpr = expression(0);
				State = 408;
				Match(T__6);
				State = 415;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 409;
					Match(T__9);
					State = 410;
					Match(WITH_NAME);
					State = 411;
					Match(T__4);
					State = 412;
					((BatchAccessContext)_localctx).deviceNameHashExpr = expression(0);
					State = 413;
					Match(T__6);
					}
					break;
				}
				State = 423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 417;
					Match(T__9);
					State = 418;
					((BatchAccessContext)_localctx).prop = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) ) {
						((BatchAccessContext)_localctx).prop = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 419;
					Match(T__11);
					State = 420;
					((BatchAccessContext)_localctx).targetIdxExpr = expression(0);
					State = 421;
					Match(T__12);
					}
					break;
				}
				State = 425;
				Match(T__9);
				State = 426;
				((BatchAccessContext)_localctx).member = Match(IDENTIFIER);
				State = 427;
				Match(T__9);
				State = 428;
				((BatchAccessContext)_localctx).batchMode = Match(IDENTIFIER);
				}
				break;
			case 15:
				{
				_localctx = new ArrayElementAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 430;
				Match(IDENTIFIER);
				State = 431;
				Match(T__11);
				State = 432;
				((ArrayElementAccessContext)_localctx).indexExpr = expression(0);
				State = 433;
				Match(T__12);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 457;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 455;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 437;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 438;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==SHIFTL || _la==SHIFTR) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 439;
						((BinaryOpContext)_localctx).right = expression(19);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 440;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 441;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 939524096L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 442;
						((BinaryOpContext)_localctx).right = expression(18);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 443;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 444;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 445;
						((BinaryOpContext)_localctx).right = expression(17);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 446;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 447;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3427383902208L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 448;
						((BinaryOpContext)_localctx).right = expression(16);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 449;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 450;
						((BinaryOpContext)_localctx).op = Match(AND);
						State = 451;
						((BinaryOpContext)_localctx).right = expression(15);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 452;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 453;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==XOR) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 454;
						((BinaryOpContext)_localctx).right = expression(14);
						}
						break;
					}
					} 
				}
				State = 459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,59,461,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,1,
		0,1,0,1,0,5,0,62,8,0,10,0,12,0,65,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,
		1,2,1,2,1,2,1,2,1,2,5,2,80,8,2,10,2,12,2,83,9,2,3,2,85,8,2,1,2,1,2,1,2,
		1,3,1,3,5,3,92,8,3,10,3,12,3,95,9,3,1,3,1,3,1,4,1,4,3,4,101,8,4,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,
		121,8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,5,11,141,8,11,10,11,12,11,144,9,11,3,11,146,8,11,1,11,1,
		11,1,12,1,12,3,12,152,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,160,8,13,
		1,14,1,14,1,14,1,14,1,14,1,14,3,14,168,8,14,1,14,1,14,1,14,3,14,173,8,
		14,3,14,175,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,197,8,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,212,8,17,1,17,
		1,17,1,17,1,17,1,17,1,17,3,17,220,8,17,1,17,1,17,1,17,1,17,1,17,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,235,8,18,1,18,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,3,20,257,8,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
		24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,5,25,299,8,25,10,25,12,25,302,9,25,3,25,304,8,25,1,25,3,25,307,
		8,25,1,25,3,25,310,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,5,27,344,8,27,10,27,12,27,347,
		9,27,3,27,349,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,1,27,3,27,364,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,384,8,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,3,27,404,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		3,27,416,8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,424,8,27,1,27,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,436,8,27,1,27,1,27,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		5,27,456,8,27,10,27,12,27,459,9,27,1,27,0,1,54,28,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,10,1,0,3,4,
		1,0,44,46,2,0,22,22,53,53,3,0,26,26,30,30,42,42,2,0,52,52,54,56,1,0,31,
		32,1,0,27,29,1,0,25,26,2,0,33,36,40,41,1,0,38,39,499,0,63,1,0,0,0,2,68,
		1,0,0,0,4,73,1,0,0,0,6,89,1,0,0,0,8,100,1,0,0,0,10,120,1,0,0,0,12,124,
		1,0,0,0,14,126,1,0,0,0,16,128,1,0,0,0,18,131,1,0,0,0,20,133,1,0,0,0,22,
		135,1,0,0,0,24,151,1,0,0,0,26,153,1,0,0,0,28,161,1,0,0,0,30,176,1,0,0,
		0,32,185,1,0,0,0,34,201,1,0,0,0,36,226,1,0,0,0,38,239,1,0,0,0,40,245,1,
		0,0,0,42,261,1,0,0,0,44,270,1,0,0,0,46,274,1,0,0,0,48,279,1,0,0,0,50,309,
		1,0,0,0,52,311,1,0,0,0,54,435,1,0,0,0,56,62,3,2,1,0,57,58,3,48,24,0,58,
		59,5,1,0,0,59,62,1,0,0,0,60,62,3,4,2,0,61,56,1,0,0,0,61,57,1,0,0,0,61,
		60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,
		63,1,0,0,0,66,67,5,0,0,1,67,1,1,0,0,0,68,69,5,2,0,0,69,70,5,53,0,0,70,
		71,5,14,0,0,71,72,5,1,0,0,72,3,1,0,0,0,73,74,7,0,0,0,74,75,5,53,0,0,75,
		84,5,5,0,0,76,81,5,53,0,0,77,78,5,6,0,0,78,80,5,53,0,0,79,77,1,0,0,0,80,
		83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,84,
		76,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,5,7,0,0,87,88,3,6,3,0,88,
		5,1,0,0,0,89,93,5,8,0,0,90,92,3,8,4,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,
		1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,5,9,0,0,97,7,1,
		0,0,0,98,101,3,10,5,0,99,101,3,24,12,0,100,98,1,0,0,0,100,99,1,0,0,0,101,
		9,1,0,0,0,102,121,3,32,16,0,103,121,3,30,15,0,104,121,3,34,17,0,105,121,
		3,40,20,0,106,121,3,42,21,0,107,121,3,36,18,0,108,121,3,38,19,0,109,121,
		3,44,22,0,110,121,3,12,6,0,111,121,3,16,8,0,112,121,3,14,7,0,113,121,3,
		18,9,0,114,121,3,20,10,0,115,121,3,46,23,0,116,121,3,48,24,0,117,121,3,
		22,11,0,118,121,3,50,25,0,119,121,3,52,26,0,120,102,1,0,0,0,120,103,1,
		0,0,0,120,104,1,0,0,0,120,105,1,0,0,0,120,106,1,0,0,0,120,107,1,0,0,0,
		120,108,1,0,0,0,120,109,1,0,0,0,120,110,1,0,0,0,120,111,1,0,0,0,120,112,
		1,0,0,0,120,113,1,0,0,0,120,114,1,0,0,0,120,115,1,0,0,0,120,116,1,0,0,
		0,120,117,1,0,0,0,120,118,1,0,0,0,120,119,1,0,0,0,121,122,1,0,0,0,122,
		123,5,1,0,0,123,11,1,0,0,0,124,125,5,18,0,0,125,13,1,0,0,0,126,127,5,19,
		0,0,127,15,1,0,0,0,128,129,5,19,0,0,129,130,3,54,27,0,130,17,1,0,0,0,131,
		132,5,20,0,0,132,19,1,0,0,0,133,134,5,21,0,0,134,21,1,0,0,0,135,136,5,
		53,0,0,136,145,5,5,0,0,137,142,3,54,27,0,138,139,5,6,0,0,139,141,3,54,
		27,0,140,138,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,
		146,1,0,0,0,144,142,1,0,0,0,145,137,1,0,0,0,145,146,1,0,0,0,146,147,1,
		0,0,0,147,148,5,7,0,0,148,23,1,0,0,0,149,152,3,26,13,0,150,152,3,28,14,
		0,151,149,1,0,0,0,151,150,1,0,0,0,152,25,1,0,0,0,153,154,5,15,0,0,154,
		155,5,5,0,0,155,156,3,54,27,0,156,159,5,7,0,0,157,160,3,6,3,0,158,160,
		3,8,4,0,159,157,1,0,0,0,159,158,1,0,0,0,160,27,1,0,0,0,161,162,5,16,0,
		0,162,163,5,5,0,0,163,164,3,54,27,0,164,167,5,7,0,0,165,168,3,6,3,0,166,
		168,3,8,4,0,167,165,1,0,0,0,167,166,1,0,0,0,168,174,1,0,0,0,169,172,5,
		17,0,0,170,173,3,6,3,0,171,173,3,8,4,0,172,170,1,0,0,0,172,171,1,0,0,0,
		173,175,1,0,0,0,174,169,1,0,0,0,174,175,1,0,0,0,175,29,1,0,0,0,176,177,
		5,47,0,0,177,178,5,5,0,0,178,179,3,54,27,0,179,180,5,7,0,0,180,181,5,10,
		0,0,181,182,5,53,0,0,182,183,5,11,0,0,183,184,3,54,27,0,184,31,1,0,0,0,
		185,186,5,47,0,0,186,187,5,5,0,0,187,188,3,54,27,0,188,189,5,7,0,0,189,
		190,5,10,0,0,190,191,7,1,0,0,191,192,5,12,0,0,192,193,3,54,27,0,193,196,
		5,13,0,0,194,195,5,10,0,0,195,197,5,53,0,0,196,194,1,0,0,0,196,197,1,0,
		0,0,197,198,1,0,0,0,198,199,5,11,0,0,199,200,3,54,27,0,200,33,1,0,0,0,
		201,202,5,48,0,0,202,203,5,5,0,0,203,204,3,54,27,0,204,211,5,7,0,0,205,
		206,5,10,0,0,206,207,5,49,0,0,207,208,5,5,0,0,208,209,3,54,27,0,209,210,
		5,7,0,0,210,212,1,0,0,0,211,205,1,0,0,0,211,212,1,0,0,0,212,219,1,0,0,
		0,213,214,5,10,0,0,214,215,7,1,0,0,215,216,5,12,0,0,216,217,3,54,27,0,
		217,218,5,13,0,0,218,220,1,0,0,0,219,213,1,0,0,0,219,220,1,0,0,0,220,221,
		1,0,0,0,221,222,5,10,0,0,222,223,5,53,0,0,223,224,5,11,0,0,224,225,3,54,
		27,0,225,35,1,0,0,0,226,227,7,2,0,0,227,228,5,10,0,0,228,229,7,1,0,0,229,
		230,5,12,0,0,230,231,3,54,27,0,231,234,5,13,0,0,232,233,5,10,0,0,233,235,
		5,53,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,5,11,
		0,0,237,238,3,54,27,0,238,37,1,0,0,0,239,240,7,2,0,0,240,241,5,10,0,0,
		241,242,5,53,0,0,242,243,5,11,0,0,243,244,3,54,27,0,244,39,1,0,0,0,245,
		246,5,43,0,0,246,247,5,12,0,0,247,248,3,54,27,0,248,249,5,13,0,0,249,250,
		5,10,0,0,250,251,7,1,0,0,251,252,5,12,0,0,252,253,3,54,27,0,253,256,5,
		13,0,0,254,255,5,10,0,0,255,257,5,53,0,0,256,254,1,0,0,0,256,257,1,0,0,
		0,257,258,1,0,0,0,258,259,5,11,0,0,259,260,3,54,27,0,260,41,1,0,0,0,261,
		262,5,43,0,0,262,263,5,12,0,0,263,264,3,54,27,0,264,265,5,13,0,0,265,266,
		5,10,0,0,266,267,5,53,0,0,267,268,5,11,0,0,268,269,3,54,27,0,269,43,1,
		0,0,0,270,271,5,53,0,0,271,272,5,11,0,0,272,273,3,54,27,0,273,45,1,0,0,
		0,274,275,5,23,0,0,275,276,5,53,0,0,276,277,5,11,0,0,277,278,3,54,27,0,
		278,47,1,0,0,0,279,280,5,24,0,0,280,281,5,53,0,0,281,282,5,11,0,0,282,
		283,3,54,27,0,283,49,1,0,0,0,284,285,5,23,0,0,285,286,5,53,0,0,286,287,
		5,11,0,0,287,288,5,12,0,0,288,289,3,54,27,0,289,290,5,13,0,0,290,310,1,
		0,0,0,291,292,5,23,0,0,292,293,5,53,0,0,293,294,5,11,0,0,294,303,5,8,0,
		0,295,300,3,54,27,0,296,297,5,6,0,0,297,299,3,54,27,0,298,296,1,0,0,0,
		299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,304,1,0,0,0,302,300,
		1,0,0,0,303,295,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,307,5,6,0,
		0,306,305,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,310,5,9,0,0,309,
		284,1,0,0,0,309,291,1,0,0,0,310,51,1,0,0,0,311,312,5,53,0,0,312,313,5,
		12,0,0,313,314,3,54,27,0,314,315,5,13,0,0,315,316,5,11,0,0,316,317,3,54,
		27,0,317,53,1,0,0,0,318,319,6,27,-1,0,319,320,5,50,0,0,320,321,5,5,0,0,
		321,322,3,54,27,0,322,323,5,7,0,0,323,436,1,0,0,0,324,325,5,51,0,0,325,
		326,5,5,0,0,326,327,3,54,27,0,327,328,5,6,0,0,328,329,3,54,27,0,329,330,
		5,7,0,0,330,436,1,0,0,0,331,332,7,3,0,0,332,436,3,54,27,19,333,334,5,5,
		0,0,334,335,3,54,27,0,335,336,5,7,0,0,336,436,1,0,0,0,337,436,7,4,0,0,
		338,339,5,53,0,0,339,348,5,5,0,0,340,345,3,54,27,0,341,342,5,6,0,0,342,
		344,3,54,27,0,343,341,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,
		1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,348,340,1,0,0,0,348,349,1,0,0,
		0,349,350,1,0,0,0,350,436,5,7,0,0,351,436,5,53,0,0,352,353,7,2,0,0,353,
		354,5,10,0,0,354,436,5,53,0,0,355,356,7,2,0,0,356,357,5,10,0,0,357,358,
		7,1,0,0,358,359,5,12,0,0,359,360,3,54,27,0,360,363,5,13,0,0,361,362,5,
		10,0,0,362,364,5,53,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,436,1,0,0,
		0,365,366,5,43,0,0,366,367,5,12,0,0,367,368,3,54,27,0,368,369,5,13,0,0,
		369,370,5,10,0,0,370,371,5,53,0,0,371,436,1,0,0,0,372,373,5,43,0,0,373,
		374,5,12,0,0,374,375,3,54,27,0,375,376,5,13,0,0,376,377,5,10,0,0,377,378,
		7,1,0,0,378,379,5,12,0,0,379,380,3,54,27,0,380,383,5,13,0,0,381,382,5,
		10,0,0,382,384,5,53,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,436,1,0,0,
		0,385,386,5,47,0,0,386,387,5,5,0,0,387,388,3,54,27,0,388,389,5,7,0,0,389,
		390,5,10,0,0,390,391,5,53,0,0,391,436,1,0,0,0,392,393,5,47,0,0,393,394,
		5,5,0,0,394,395,3,54,27,0,395,396,5,7,0,0,396,397,5,10,0,0,397,398,7,1,
		0,0,398,399,5,12,0,0,399,400,3,54,27,0,400,403,5,13,0,0,401,402,5,10,0,
		0,402,404,5,53,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,436,1,0,0,0,405,
		406,5,48,0,0,406,407,5,5,0,0,407,408,3,54,27,0,408,415,5,7,0,0,409,410,
		5,10,0,0,410,411,5,49,0,0,411,412,5,5,0,0,412,413,3,54,27,0,413,414,5,
		7,0,0,414,416,1,0,0,0,415,409,1,0,0,0,415,416,1,0,0,0,416,423,1,0,0,0,
		417,418,5,10,0,0,418,419,7,1,0,0,419,420,5,12,0,0,420,421,3,54,27,0,421,
		422,5,13,0,0,422,424,1,0,0,0,423,417,1,0,0,0,423,424,1,0,0,0,424,425,1,
		0,0,0,425,426,5,10,0,0,426,427,5,53,0,0,427,428,5,10,0,0,428,429,5,53,
		0,0,429,436,1,0,0,0,430,431,5,53,0,0,431,432,5,12,0,0,432,433,3,54,27,
		0,433,434,5,13,0,0,434,436,1,0,0,0,435,318,1,0,0,0,435,324,1,0,0,0,435,
		331,1,0,0,0,435,333,1,0,0,0,435,337,1,0,0,0,435,338,1,0,0,0,435,351,1,
		0,0,0,435,352,1,0,0,0,435,355,1,0,0,0,435,365,1,0,0,0,435,372,1,0,0,0,
		435,385,1,0,0,0,435,392,1,0,0,0,435,405,1,0,0,0,435,430,1,0,0,0,436,457,
		1,0,0,0,437,438,10,18,0,0,438,439,7,5,0,0,439,456,3,54,27,19,440,441,10,
		17,0,0,441,442,7,6,0,0,442,456,3,54,27,18,443,444,10,16,0,0,444,445,7,
		7,0,0,445,456,3,54,27,17,446,447,10,15,0,0,447,448,7,8,0,0,448,456,3,54,
		27,16,449,450,10,14,0,0,450,451,5,37,0,0,451,456,3,54,27,15,452,453,10,
		13,0,0,453,454,7,9,0,0,454,456,3,54,27,14,455,437,1,0,0,0,455,440,1,0,
		0,0,455,443,1,0,0,0,455,446,1,0,0,0,455,449,1,0,0,0,455,452,1,0,0,0,456,
		459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,55,1,0,0,0,459,457,1,0,
		0,0,33,61,63,81,84,93,100,120,142,145,151,159,167,172,174,196,211,219,
		234,256,300,303,306,309,345,348,363,383,403,415,423,435,455,457
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

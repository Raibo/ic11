//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ic11.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ic11Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, PINID=14, WHILE=15, IF=16, ELSE=17, 
		YIELD=18, RETURN=19, CONTINUE=20, BREAK=21, BASE_DEVICE=22, VAR=23, CONST=24, 
		ADD=25, SUB=26, MUL=27, DIV=28, MOD=29, LT=30, GT=31, LE=32, GE=33, AND=34, 
		OR=35, EQ=36, NE=37, NEGATION=38, ABS=39, PINS=40, SLOTS=41, DEVICE_WITH_ID=42, 
		BOOLEAN=43, IDENTIFIER=44, INTEGER=45, REAL=46, WS=47, LINE_COMMENT=48, 
		MULTILINE_COMMENT=49;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_function = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_delimitedStatement = 5, RULE_yieldStatement = 6, 
		RULE_returnStatement = 7, RULE_returnValueStatement = 8, RULE_continueStatement = 9, 
		RULE_breakStatement = 10, RULE_functionCallStatement = 11, RULE_undelimitedStatement = 12, 
		RULE_whileStatement = 13, RULE_ifStatement = 14, RULE_deviceWithIdAssignment = 15, 
		RULE_memberSlotAssignment = 16, RULE_memberAssignment = 17, RULE_deviceWithIndexSlotAssignment = 18, 
		RULE_deviceWithIndexAssignment = 19, RULE_assignment = 20, RULE_variableDeclaration = 21, 
		RULE_constantDeclaration = 22, RULE_arrayDeclaration = 23, RULE_arrayAssignment = 24, 
		RULE_expression = 25;
	public static readonly string[] ruleNames = {
		"program", "declaration", "function", "block", "statement", "delimitedStatement", 
		"yieldStatement", "returnStatement", "returnValueStatement", "continueStatement", 
		"breakStatement", "functionCallStatement", "undelimitedStatement", "whileStatement", 
		"ifStatement", "deviceWithIdAssignment", "memberSlotAssignment", "memberAssignment", 
		"deviceWithIndexSlotAssignment", "deviceWithIndexAssignment", "assignment", 
		"variableDeclaration", "constantDeclaration", "arrayDeclaration", "arrayAssignment", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'pin'", "'void'", "'real'", "'('", "','", "')'", "'{'", 
		"'}'", "'.'", "'='", "'['", "']'", null, "'while'", "'if'", "'else'", 
		"'yield'", "'return'", "'continue'", "'break'", "'Base'", "'var'", "'const'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", "'&&'", 
		"'||'", "'=='", "'!='", "'!'", "'Abs'", "'Pins'", "'Slots'", "'DeviceWithId'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "PINID", "WHILE", "IF", "ELSE", "YIELD", "RETURN", "CONTINUE", 
		"BREAK", "BASE_DEVICE", "VAR", "CONST", "ADD", "SUB", "MUL", "DIV", "MOD", 
		"LT", "GT", "LE", "GE", "AND", "OR", "EQ", "NE", "NEGATION", "ABS", "PINS", 
		"SLOTS", "DEVICE_WITH_ID", "BOOLEAN", "IDENTIFIER", "INTEGER", "REAL", 
		"WS", "LINE_COMMENT", "MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ic11.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ic11Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Ic11Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Ic11Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Ic11Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext[] constantDeclaration() {
			return GetRuleContexts<ConstantDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration(int i) {
			return GetRuleContext<ConstantDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16777244L) != 0)) {
				{
				State = 57;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__1:
					{
					State = 52;
					declaration();
					}
					break;
				case CONST:
					{
					{
					State = 53;
					constantDeclaration();
					State = 54;
					Match(T__0);
					}
					}
					break;
				case T__2:
				case T__3:
					{
					State = 56;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINID() { return GetToken(Ic11Parser.PINID, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__1);
			State = 65;
			Match(IDENTIFIER);
			State = 66;
			Match(PINID);
			State = 67;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken retType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_localctx.retType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
				_localctx.retType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 70;
			Match(IDENTIFIER);
			State = 71;
			Match(T__4);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 72;
				Match(IDENTIFIER);
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 73;
					Match(T__5);
					State = 74;
					Match(IDENTIFIER);
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 82;
			Match(T__6);
			State = 83;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(T__7);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 23089777573888L) != 0)) {
				{
				{
				State = 86;
				statement();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelimitedStatementContext delimitedStatement() {
			return GetRuleContext<DelimitedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndelimitedStatementContext undelimitedStatement() {
			return GetRuleContext<UndelimitedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case PINS:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				delimitedStatement();
				}
				break;
			case WHILE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				undelimitedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
			return GetRuleContext<DeviceWithIdAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIndexSlotAssignmentContext deviceWithIndexSlotAssignment() {
			return GetRuleContext<DeviceWithIndexSlotAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIndexAssignmentContext deviceWithIndexAssignment() {
			return GetRuleContext<DeviceWithIndexAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberSlotAssignmentContext memberSlotAssignment() {
			return GetRuleContext<MemberSlotAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberAssignmentContext memberAssignment() {
			return GetRuleContext<MemberAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnValueStatementContext returnValueStatement() {
			return GetRuleContext<ReturnValueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAssignmentContext arrayAssignment() {
			return GetRuleContext<ArrayAssignmentContext>(0);
		}
		public DelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelimitedStatementContext delimitedStatement() {
		DelimitedStatementContext _localctx = new DelimitedStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_delimitedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 98;
				deviceWithIdAssignment();
				}
				break;
			case 2:
				{
				State = 99;
				deviceWithIndexSlotAssignment();
				}
				break;
			case 3:
				{
				State = 100;
				deviceWithIndexAssignment();
				}
				break;
			case 4:
				{
				State = 101;
				memberSlotAssignment();
				}
				break;
			case 5:
				{
				State = 102;
				memberAssignment();
				}
				break;
			case 6:
				{
				State = 103;
				assignment();
				}
				break;
			case 7:
				{
				State = 104;
				yieldStatement();
				}
				break;
			case 8:
				{
				State = 105;
				returnValueStatement();
				}
				break;
			case 9:
				{
				State = 106;
				returnStatement();
				}
				break;
			case 10:
				{
				State = 107;
				continueStatement();
				}
				break;
			case 11:
				{
				State = 108;
				breakStatement();
				}
				break;
			case 12:
				{
				State = 109;
				variableDeclaration();
				}
				break;
			case 13:
				{
				State = 110;
				constantDeclaration();
				}
				break;
			case 14:
				{
				State = 111;
				functionCallStatement();
				}
				break;
			case 15:
				{
				State = 112;
				arrayDeclaration();
				}
				break;
			case 16:
				{
				State = 113;
				arrayAssignment();
				}
				break;
			}
			State = 116;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(Ic11Parser.YIELD, 0); }
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnValueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnValueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnValueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnValueStatementContext returnValueStatement() {
		ReturnValueStatementContext _localctx = new ReturnValueStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnValueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(RETURN);
			State = 123;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Ic11Parser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(Ic11Parser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(IDENTIFIER);
			State = 130;
			Match(T__4);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 138263658496032L) != 0)) {
				{
				State = 131;
				expression(0);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 132;
					Match(T__5);
					State = 133;
					expression(0);
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 141;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public UndelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undelimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndelimitedStatementContext undelimitedStatement() {
		UndelimitedStatementContext _localctx = new UndelimitedStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_undelimitedStatement);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				whileStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Ic11Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(WHILE);
			State = 148;
			Match(T__4);
			State = 149;
			expression(0);
			State = 150;
			Match(T__6);
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 151;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case PINS:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				{
				State = 152;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Ic11Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Ic11Parser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(IF);
			State = 156;
			Match(T__4);
			State = 157;
			expression(0);
			State = 158;
			Match(T__6);
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 159;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case BREAK:
			case BASE_DEVICE:
			case VAR:
			case CONST:
			case PINS:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				{
				State = 160;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 163;
				Match(ELSE);
				State = 166;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
					{
					State = 164;
					block();
					}
					break;
				case WHILE:
				case IF:
				case YIELD:
				case RETURN:
				case CONTINUE:
				case BREAK:
				case BASE_DEVICE:
				case VAR:
				case CONST:
				case PINS:
				case DEVICE_WITH_ID:
				case IDENTIFIER:
					{
					State = 165;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIdAssignmentContext : ParserRuleContext {
		public ExpressionContext idExpr;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DeviceWithIdAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIdAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIdAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
		DeviceWithIdAssignmentContext _localctx = new DeviceWithIdAssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_deviceWithIdAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(DEVICE_WITH_ID);
			State = 171;
			Match(T__4);
			State = 172;
			_localctx.idExpr = expression(0);
			State = 173;
			Match(T__6);
			State = 174;
			Match(T__9);
			State = 175;
			Match(IDENTIFIER);
			State = 176;
			Match(T__10);
			State = 177;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSlotAssignmentContext : ParserRuleContext {
		public IToken identifier;
		public ExpressionContext slotIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public MemberSlotAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSlotAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberSlotAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberSlotAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberSlotAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberSlotAssignmentContext memberSlotAssignment() {
		MemberSlotAssignmentContext _localctx = new MemberSlotAssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_memberSlotAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_localctx.identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
				_localctx.identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 180;
			Match(T__9);
			State = 181;
			Match(SLOTS);
			State = 182;
			Match(T__11);
			State = 183;
			_localctx.slotIdxExpr = expression(0);
			State = 184;
			Match(T__12);
			State = 185;
			Match(T__9);
			State = 186;
			_localctx.member = Match(IDENTIFIER);
			State = 187;
			Match(T__10);
			State = 188;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAssignmentContext : ParserRuleContext {
		public IToken identifier;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public MemberAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAssignmentContext memberAssignment() {
		MemberAssignmentContext _localctx = new MemberAssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_memberAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_localctx.identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
				_localctx.identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 191;
			Match(T__9);
			State = 192;
			_localctx.member = Match(IDENTIFIER);
			State = 193;
			Match(T__10);
			State = 194;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIndexSlotAssignmentContext : ParserRuleContext {
		public ExpressionContext pinIdxExpr;
		public ExpressionContext slotIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceWithIndexSlotAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIndexSlotAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIndexSlotAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIndexSlotAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIndexSlotAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIndexSlotAssignmentContext deviceWithIndexSlotAssignment() {
		DeviceWithIndexSlotAssignmentContext _localctx = new DeviceWithIndexSlotAssignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_deviceWithIndexSlotAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(PINS);
			State = 197;
			Match(T__11);
			State = 198;
			_localctx.pinIdxExpr = expression(0);
			State = 199;
			Match(T__12);
			State = 200;
			Match(T__9);
			State = 201;
			Match(SLOTS);
			State = 202;
			Match(T__11);
			State = 203;
			_localctx.slotIdxExpr = expression(0);
			State = 204;
			Match(T__12);
			State = 205;
			Match(T__9);
			State = 206;
			_localctx.member = Match(IDENTIFIER);
			State = 207;
			Match(T__10);
			State = 208;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIndexAssignmentContext : ParserRuleContext {
		public ExpressionContext pinIdxExpr;
		public IToken member;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceWithIndexAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIndexAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIndexAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIndexAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIndexAssignmentContext deviceWithIndexAssignment() {
		DeviceWithIndexAssignmentContext _localctx = new DeviceWithIndexAssignmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_deviceWithIndexAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(PINS);
			State = 211;
			Match(T__11);
			State = 212;
			_localctx.pinIdxExpr = expression(0);
			State = 213;
			Match(T__12);
			State = 214;
			Match(T__9);
			State = 215;
			_localctx.member = Match(IDENTIFIER);
			State = 216;
			Match(T__10);
			State = 217;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(IDENTIFIER);
			State = 220;
			Match(T__10);
			State = 221;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(VAR);
			State = 224;
			Match(IDENTIFIER);
			State = 225;
			Match(T__10);
			State = 226;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(Ic11Parser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_constantDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(CONST);
			State = 229;
			Match(IDENTIFIER);
			State = 230;
			Match(T__10);
			State = 231;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
	 
		public ArrayDeclarationContext() { }
		public virtual void CopyFrom(ArrayDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArraySizeDeclarationContext : ArrayDeclarationContext {
		public ExpressionContext sizeExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArraySizeDeclarationContext(ArrayDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArraySizeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArraySizeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySizeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayListDeclarationContext : ArrayDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayListDeclarationContext(ArrayDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArrayListDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArrayListDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayListDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrayDeclaration);
		int _la;
		try {
			int _alt;
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new ArraySizeDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				Match(VAR);
				State = 234;
				Match(IDENTIFIER);
				State = 235;
				Match(T__10);
				State = 236;
				Match(T__11);
				State = 237;
				((ArraySizeDeclarationContext)_localctx).sizeExpr = expression(0);
				State = 238;
				Match(T__12);
				}
				break;
			case 2:
				_localctx = new ArrayListDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				Match(VAR);
				State = 241;
				Match(IDENTIFIER);
				State = 242;
				Match(T__10);
				State = 243;
				Match(T__7);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 138263658496032L) != 0)) {
					{
					State = 244;
					expression(0);
					State = 249;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 245;
							Match(T__5);
							State = 246;
							expression(0);
							}
							} 
						}
						State = 251;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
					}
					}
				}

				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 254;
					Match(T__5);
					}
				}

				State = 257;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAssignmentContext : ParserRuleContext {
		public ExpressionContext indexExpr;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArrayAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAssignmentContext arrayAssignment() {
		ArrayAssignmentContext _localctx = new ArrayAssignmentContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(IDENTIFIER);
			State = 261;
			Match(T__11);
			State = 262;
			_localctx.indexExpr = expression(0);
			State = 263;
			Match(T__12);
			State = 264;
			Match(T__10);
			State = 265;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SlotDeviceIndexAccessContext : ExpressionContext {
		public ExpressionContext pinIdxExpr;
		public ExpressionContext slotIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public SlotDeviceIndexAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterSlotDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitSlotDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlotDeviceIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOpContext : ExpressionContext {
		public IToken op;
		public ExpressionContext operand;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(Ic11Parser.NEGATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(Ic11Parser.ABS, 0); }
		public UnaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public IdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SlotMemberAccessContext : ExpressionContext {
		public IToken identifier;
		public ExpressionContext slotIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOTS() { return GetToken(Ic11Parser.SLOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public SlotMemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterSlotMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitSlotMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlotMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessContext : ExpressionContext {
		public IToken identifier;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_DEVICE() { return GetToken(Ic11Parser.BASE_DEVICE, 0); }
		public MemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(Ic11Parser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Ic11Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(Ic11Parser.REAL, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeviceIndexAccessContext : ExpressionContext {
		public ExpressionContext pinIdxExpr;
		public IToken member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINS() { return GetToken(Ic11Parser.PINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceIndexAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceIndexAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceIndexAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeviceIdAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceIdAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceIdAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayElementAccessContext : ExpressionContext {
		public ExpressionContext indexExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterArrayElementAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitArrayElementAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Ic11Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Ic11Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(Ic11Parser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Ic11Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Ic11Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Ic11Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Ic11Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Ic11Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Ic11Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(Ic11Parser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Ic11Parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(Ic11Parser.OR, 0); }
		public BinaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 268;
				((UnaryOpContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SUB || _la==NEGATION) ) {
					((UnaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 269;
				((UnaryOpContext)_localctx).operand = expression(17);
				}
				break;
			case 2:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 270;
				((UnaryOpContext)_localctx).op = Match(ABS);
				State = 271;
				Match(T__4);
				State = 272;
				((UnaryOpContext)_localctx).operand = expression(0);
				State = 273;
				Match(T__6);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 275;
				Match(T__4);
				State = 276;
				expression(0);
				State = 277;
				Match(T__6);
				}
				break;
			case 4:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279;
				((LiteralContext)_localctx).type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 114349209288704L) != 0)) ) {
					((LiteralContext)_localctx).type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 280;
				Match(IDENTIFIER);
				State = 281;
				Match(T__4);
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 138263658496032L) != 0)) {
					{
					State = 282;
					expression(0);
					State = 287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 283;
						Match(T__5);
						State = 284;
						expression(0);
						}
						}
						State = 289;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 292;
				Match(T__6);
				}
				break;
			case 6:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293;
				Match(IDENTIFIER);
				}
				break;
			case 7:
				{
				_localctx = new MemberAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 294;
				((MemberAccessContext)_localctx).identifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
					((MemberAccessContext)_localctx).identifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 295;
				Match(T__9);
				State = 296;
				((MemberAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 8:
				{
				_localctx = new SlotMemberAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				((SlotMemberAccessContext)_localctx).identifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BASE_DEVICE || _la==IDENTIFIER) ) {
					((SlotMemberAccessContext)_localctx).identifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 298;
				Match(T__9);
				State = 299;
				Match(SLOTS);
				State = 300;
				Match(T__11);
				State = 301;
				((SlotMemberAccessContext)_localctx).slotIdxExpr = expression(0);
				State = 302;
				Match(T__12);
				State = 303;
				Match(T__9);
				State = 304;
				((SlotMemberAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 9:
				{
				_localctx = new DeviceIndexAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 306;
				Match(PINS);
				State = 307;
				Match(T__11);
				State = 308;
				((DeviceIndexAccessContext)_localctx).pinIdxExpr = expression(0);
				State = 309;
				Match(T__12);
				State = 310;
				Match(T__9);
				State = 311;
				((DeviceIndexAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 10:
				{
				_localctx = new SlotDeviceIndexAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 313;
				Match(PINS);
				State = 314;
				Match(T__11);
				State = 315;
				((SlotDeviceIndexAccessContext)_localctx).pinIdxExpr = expression(0);
				State = 316;
				Match(T__12);
				State = 317;
				Match(T__9);
				State = 318;
				Match(SLOTS);
				State = 319;
				Match(T__11);
				State = 320;
				((SlotDeviceIndexAccessContext)_localctx).slotIdxExpr = expression(0);
				State = 321;
				Match(T__12);
				State = 322;
				Match(T__9);
				State = 323;
				((SlotDeviceIndexAccessContext)_localctx).member = Match(IDENTIFIER);
				}
				break;
			case 11:
				{
				_localctx = new DeviceIdAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 325;
				Match(DEVICE_WITH_ID);
				State = 326;
				Match(T__4);
				State = 327;
				expression(0);
				State = 328;
				Match(T__6);
				State = 329;
				Match(T__9);
				State = 330;
				Match(IDENTIFIER);
				}
				break;
			case 12:
				{
				_localctx = new ArrayElementAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 332;
				Match(IDENTIFIER);
				State = 333;
				Match(T__11);
				State = 334;
				((ArrayElementAccessContext)_localctx).indexExpr = expression(0);
				State = 335;
				Match(T__12);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 356;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 354;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 339;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 340;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 939524096L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 341;
						((BinaryOpContext)_localctx).right = expression(16);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 342;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 343;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 344;
						((BinaryOpContext)_localctx).right = expression(15);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 345;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 346;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 222264557568L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 347;
						((BinaryOpContext)_localctx).right = expression(14);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 348;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 349;
						((BinaryOpContext)_localctx).op = Match(AND);
						State = 350;
						((BinaryOpContext)_localctx).right = expression(13);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 351;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 352;
						((BinaryOpContext)_localctx).op = Match(OR);
						State = 353;
						((BinaryOpContext)_localctx).right = expression(12);
						}
						break;
					}
					} 
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,49,360,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,1,0,5,0,58,8,0,
		10,0,12,0,61,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,5,
		2,76,8,2,10,2,12,2,79,9,2,3,2,81,8,2,1,2,1,2,1,2,1,3,1,3,5,3,88,8,3,10,
		3,12,3,91,9,3,1,3,1,3,1,4,1,4,3,4,97,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,115,8,5,1,5,1,5,1,6,1,6,1,7,1,7,
		1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,5,11,135,8,11,10,
		11,12,11,138,9,11,3,11,140,8,11,1,11,1,11,1,12,1,12,3,12,146,8,12,1,13,
		1,13,1,13,1,13,1,13,1,13,3,13,154,8,13,1,14,1,14,1,14,1,14,1,14,1,14,3,
		14,162,8,14,1,14,1,14,1,14,3,14,167,8,14,3,14,169,8,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,5,23,248,8,23,10,23,12,23,251,9,23,3,23,253,8,23,1,
		23,3,23,256,8,23,1,23,3,23,259,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,5,25,286,8,25,10,25,12,25,289,9,25,3,25,291,8,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,3,25,338,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,5,25,355,8,25,10,25,12,25,358,9,25,1,25,
		0,1,50,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,0,7,1,0,3,4,2,0,22,22,44,44,2,0,26,26,38,38,2,0,43,43,45,46,
		1,0,27,29,1,0,25,26,2,0,30,33,36,37,384,0,59,1,0,0,0,2,64,1,0,0,0,4,69,
		1,0,0,0,6,85,1,0,0,0,8,96,1,0,0,0,10,114,1,0,0,0,12,118,1,0,0,0,14,120,
		1,0,0,0,16,122,1,0,0,0,18,125,1,0,0,0,20,127,1,0,0,0,22,129,1,0,0,0,24,
		145,1,0,0,0,26,147,1,0,0,0,28,155,1,0,0,0,30,170,1,0,0,0,32,179,1,0,0,
		0,34,190,1,0,0,0,36,196,1,0,0,0,38,210,1,0,0,0,40,219,1,0,0,0,42,223,1,
		0,0,0,44,228,1,0,0,0,46,258,1,0,0,0,48,260,1,0,0,0,50,337,1,0,0,0,52,58,
		3,2,1,0,53,54,3,44,22,0,54,55,5,1,0,0,55,58,1,0,0,0,56,58,3,4,2,0,57,52,
		1,0,0,0,57,53,1,0,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,
		1,0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,63,5,0,0,1,63,1,1,0,0,0,64,65,5,
		2,0,0,65,66,5,44,0,0,66,67,5,14,0,0,67,68,5,1,0,0,68,3,1,0,0,0,69,70,7,
		0,0,0,70,71,5,44,0,0,71,80,5,5,0,0,72,77,5,44,0,0,73,74,5,6,0,0,74,76,
		5,44,0,0,75,73,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,81,
		1,0,0,0,79,77,1,0,0,0,80,72,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,
		5,7,0,0,83,84,3,6,3,0,84,5,1,0,0,0,85,89,5,8,0,0,86,88,3,8,4,0,87,86,1,
		0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,
		0,0,0,92,93,5,9,0,0,93,7,1,0,0,0,94,97,3,10,5,0,95,97,3,24,12,0,96,94,
		1,0,0,0,96,95,1,0,0,0,97,9,1,0,0,0,98,115,3,30,15,0,99,115,3,36,18,0,100,
		115,3,38,19,0,101,115,3,32,16,0,102,115,3,34,17,0,103,115,3,40,20,0,104,
		115,3,12,6,0,105,115,3,16,8,0,106,115,3,14,7,0,107,115,3,18,9,0,108,115,
		3,20,10,0,109,115,3,42,21,0,110,115,3,44,22,0,111,115,3,22,11,0,112,115,
		3,46,23,0,113,115,3,48,24,0,114,98,1,0,0,0,114,99,1,0,0,0,114,100,1,0,
		0,0,114,101,1,0,0,0,114,102,1,0,0,0,114,103,1,0,0,0,114,104,1,0,0,0,114,
		105,1,0,0,0,114,106,1,0,0,0,114,107,1,0,0,0,114,108,1,0,0,0,114,109,1,
		0,0,0,114,110,1,0,0,0,114,111,1,0,0,0,114,112,1,0,0,0,114,113,1,0,0,0,
		115,116,1,0,0,0,116,117,5,1,0,0,117,11,1,0,0,0,118,119,5,18,0,0,119,13,
		1,0,0,0,120,121,5,19,0,0,121,15,1,0,0,0,122,123,5,19,0,0,123,124,3,50,
		25,0,124,17,1,0,0,0,125,126,5,20,0,0,126,19,1,0,0,0,127,128,5,21,0,0,128,
		21,1,0,0,0,129,130,5,44,0,0,130,139,5,5,0,0,131,136,3,50,25,0,132,133,
		5,6,0,0,133,135,3,50,25,0,134,132,1,0,0,0,135,138,1,0,0,0,136,134,1,0,
		0,0,136,137,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,139,131,1,0,0,0,139,
		140,1,0,0,0,140,141,1,0,0,0,141,142,5,7,0,0,142,23,1,0,0,0,143,146,3,26,
		13,0,144,146,3,28,14,0,145,143,1,0,0,0,145,144,1,0,0,0,146,25,1,0,0,0,
		147,148,5,15,0,0,148,149,5,5,0,0,149,150,3,50,25,0,150,153,5,7,0,0,151,
		154,3,6,3,0,152,154,3,8,4,0,153,151,1,0,0,0,153,152,1,0,0,0,154,27,1,0,
		0,0,155,156,5,16,0,0,156,157,5,5,0,0,157,158,3,50,25,0,158,161,5,7,0,0,
		159,162,3,6,3,0,160,162,3,8,4,0,161,159,1,0,0,0,161,160,1,0,0,0,162,168,
		1,0,0,0,163,166,5,17,0,0,164,167,3,6,3,0,165,167,3,8,4,0,166,164,1,0,0,
		0,166,165,1,0,0,0,167,169,1,0,0,0,168,163,1,0,0,0,168,169,1,0,0,0,169,
		29,1,0,0,0,170,171,5,42,0,0,171,172,5,5,0,0,172,173,3,50,25,0,173,174,
		5,7,0,0,174,175,5,10,0,0,175,176,5,44,0,0,176,177,5,11,0,0,177,178,3,50,
		25,0,178,31,1,0,0,0,179,180,7,1,0,0,180,181,5,10,0,0,181,182,5,41,0,0,
		182,183,5,12,0,0,183,184,3,50,25,0,184,185,5,13,0,0,185,186,5,10,0,0,186,
		187,5,44,0,0,187,188,5,11,0,0,188,189,3,50,25,0,189,33,1,0,0,0,190,191,
		7,1,0,0,191,192,5,10,0,0,192,193,5,44,0,0,193,194,5,11,0,0,194,195,3,50,
		25,0,195,35,1,0,0,0,196,197,5,40,0,0,197,198,5,12,0,0,198,199,3,50,25,
		0,199,200,5,13,0,0,200,201,5,10,0,0,201,202,5,41,0,0,202,203,5,12,0,0,
		203,204,3,50,25,0,204,205,5,13,0,0,205,206,5,10,0,0,206,207,5,44,0,0,207,
		208,5,11,0,0,208,209,3,50,25,0,209,37,1,0,0,0,210,211,5,40,0,0,211,212,
		5,12,0,0,212,213,3,50,25,0,213,214,5,13,0,0,214,215,5,10,0,0,215,216,5,
		44,0,0,216,217,5,11,0,0,217,218,3,50,25,0,218,39,1,0,0,0,219,220,5,44,
		0,0,220,221,5,11,0,0,221,222,3,50,25,0,222,41,1,0,0,0,223,224,5,23,0,0,
		224,225,5,44,0,0,225,226,5,11,0,0,226,227,3,50,25,0,227,43,1,0,0,0,228,
		229,5,24,0,0,229,230,5,44,0,0,230,231,5,11,0,0,231,232,3,50,25,0,232,45,
		1,0,0,0,233,234,5,23,0,0,234,235,5,44,0,0,235,236,5,11,0,0,236,237,5,12,
		0,0,237,238,3,50,25,0,238,239,5,13,0,0,239,259,1,0,0,0,240,241,5,23,0,
		0,241,242,5,44,0,0,242,243,5,11,0,0,243,252,5,8,0,0,244,249,3,50,25,0,
		245,246,5,6,0,0,246,248,3,50,25,0,247,245,1,0,0,0,248,251,1,0,0,0,249,
		247,1,0,0,0,249,250,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,244,1,
		0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,256,5,6,0,0,255,254,1,0,0,0,
		255,256,1,0,0,0,256,257,1,0,0,0,257,259,5,9,0,0,258,233,1,0,0,0,258,240,
		1,0,0,0,259,47,1,0,0,0,260,261,5,44,0,0,261,262,5,12,0,0,262,263,3,50,
		25,0,263,264,5,13,0,0,264,265,5,11,0,0,265,266,3,50,25,0,266,49,1,0,0,
		0,267,268,6,25,-1,0,268,269,7,2,0,0,269,338,3,50,25,17,270,271,5,39,0,
		0,271,272,5,5,0,0,272,273,3,50,25,0,273,274,5,7,0,0,274,338,1,0,0,0,275,
		276,5,5,0,0,276,277,3,50,25,0,277,278,5,7,0,0,278,338,1,0,0,0,279,338,
		7,3,0,0,280,281,5,44,0,0,281,290,5,5,0,0,282,287,3,50,25,0,283,284,5,6,
		0,0,284,286,3,50,25,0,285,283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,
		287,288,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,290,282,1,0,0,0,290,291,
		1,0,0,0,291,292,1,0,0,0,292,338,5,7,0,0,293,338,5,44,0,0,294,295,7,1,0,
		0,295,296,5,10,0,0,296,338,5,44,0,0,297,298,7,1,0,0,298,299,5,10,0,0,299,
		300,5,41,0,0,300,301,5,12,0,0,301,302,3,50,25,0,302,303,5,13,0,0,303,304,
		5,10,0,0,304,305,5,44,0,0,305,338,1,0,0,0,306,307,5,40,0,0,307,308,5,12,
		0,0,308,309,3,50,25,0,309,310,5,13,0,0,310,311,5,10,0,0,311,312,5,44,0,
		0,312,338,1,0,0,0,313,314,5,40,0,0,314,315,5,12,0,0,315,316,3,50,25,0,
		316,317,5,13,0,0,317,318,5,10,0,0,318,319,5,41,0,0,319,320,5,12,0,0,320,
		321,3,50,25,0,321,322,5,13,0,0,322,323,5,10,0,0,323,324,5,44,0,0,324,338,
		1,0,0,0,325,326,5,42,0,0,326,327,5,5,0,0,327,328,3,50,25,0,328,329,5,7,
		0,0,329,330,5,10,0,0,330,331,5,44,0,0,331,338,1,0,0,0,332,333,5,44,0,0,
		333,334,5,12,0,0,334,335,3,50,25,0,335,336,5,13,0,0,336,338,1,0,0,0,337,
		267,1,0,0,0,337,270,1,0,0,0,337,275,1,0,0,0,337,279,1,0,0,0,337,280,1,
		0,0,0,337,293,1,0,0,0,337,294,1,0,0,0,337,297,1,0,0,0,337,306,1,0,0,0,
		337,313,1,0,0,0,337,325,1,0,0,0,337,332,1,0,0,0,338,356,1,0,0,0,339,340,
		10,15,0,0,340,341,7,4,0,0,341,355,3,50,25,16,342,343,10,14,0,0,343,344,
		7,5,0,0,344,355,3,50,25,15,345,346,10,13,0,0,346,347,7,6,0,0,347,355,3,
		50,25,14,348,349,10,12,0,0,349,350,5,34,0,0,350,355,3,50,25,13,351,352,
		10,11,0,0,352,353,5,35,0,0,353,355,3,50,25,12,354,339,1,0,0,0,354,342,
		1,0,0,0,354,345,1,0,0,0,354,348,1,0,0,0,354,351,1,0,0,0,355,358,1,0,0,
		0,356,354,1,0,0,0,356,357,1,0,0,0,357,51,1,0,0,0,358,356,1,0,0,0,23,57,
		59,77,80,89,96,114,136,139,145,153,161,166,168,249,252,255,258,287,290,
		337,354,356
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

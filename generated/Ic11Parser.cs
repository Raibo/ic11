//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ic11.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ic11Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, PINID=12, WHILE=13, IF=14, ELSE=15, YIELD=16, RETURN=17, 
		CONTINUE=18, VAR=19, ADD=20, SUB=21, MUL=22, DIV=23, MOD=24, LT=25, GT=26, 
		LE=27, GE=28, AND=29, OR=30, EQ=31, NE=32, NEGATION=33, DEVICE_WITH_ID=34, 
		BOOLEAN=35, IDENTIFIER=36, INTEGER=37, REAL=38, WS=39, COMMENT=40;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_function = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_delimitedStatement = 5, RULE_yieldStatement = 6, 
		RULE_returnStatement = 7, RULE_returnValueStatement = 8, RULE_continueStatement = 9, 
		RULE_functionCallStatement = 10, RULE_undelimitedStatement = 11, RULE_whileStatement = 12, 
		RULE_ifStatement = 13, RULE_deviceWithIdAssignment = 14, RULE_assignment = 15, 
		RULE_variableDeclaration = 16, RULE_expression = 17;
	public static readonly string[] ruleNames = {
		"program", "declaration", "function", "block", "statement", "delimitedStatement", 
		"yieldStatement", "returnStatement", "returnValueStatement", "continueStatement", 
		"functionCallStatement", "undelimitedStatement", "whileStatement", "ifStatement", 
		"deviceWithIdAssignment", "assignment", "variableDeclaration", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pin'", "';'", "'void'", "'real'", "'('", "','", "')'", "'{'", 
		"'}'", "'.'", "'='", null, "'while'", "'if'", "'else'", "'yield'", "'return'", 
		"'continue'", "'var'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", 
		"'<='", "'>='", "'&&'", "'||'", "'=='", "'!='", "'!'", "'DeviceWithId'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"PINID", "WHILE", "IF", "ELSE", "YIELD", "RETURN", "CONTINUE", "VAR", 
		"ADD", "SUB", "MUL", "DIV", "MOD", "LT", "GT", "LE", "GE", "AND", "OR", 
		"EQ", "NE", "NEGATION", "DEVICE_WITH_ID", "BOOLEAN", "IDENTIFIER", "INTEGER", 
		"REAL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ic11.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ic11Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Ic11Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Ic11Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Ic11Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 26L) != 0)) {
				{
				State = 38;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 36;
					declaration();
					}
					break;
				case T__2:
				case T__3:
					{
					State = 37;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINID() { return GetToken(Ic11Parser.PINID, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__0);
			State = 46;
			Match(IDENTIFIER);
			State = 47;
			Match(PINID);
			State = 48;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IToken retType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_localctx.retType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
				_localctx.retType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 51;
			Match(IDENTIFIER);
			State = 52;
			Match(T__4);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 53;
				Match(IDENTIFIER);
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 54;
					Match(T__5);
					State = 55;
					Match(IDENTIFIER);
					}
					}
					State = 60;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 63;
			Match(T__6);
			State = 64;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__7);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 85900353536L) != 0)) {
				{
				{
				State = 67;
				statement();
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DelimitedStatementContext delimitedStatement() {
			return GetRuleContext<DelimitedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndelimitedStatementContext undelimitedStatement() {
			return GetRuleContext<UndelimitedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YIELD:
			case RETURN:
			case CONTINUE:
			case VAR:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				delimitedStatement();
				}
				break;
			case WHILE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76;
				undelimitedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
			return GetRuleContext<DeviceWithIdAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnValueStatementContext returnValueStatement() {
			return GetRuleContext<ReturnValueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public DelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelimitedStatementContext delimitedStatement() {
		DelimitedStatementContext _localctx = new DelimitedStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_delimitedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 79;
				deviceWithIdAssignment();
				}
				break;
			case 2:
				{
				State = 80;
				assignment();
				}
				break;
			case 3:
				{
				State = 81;
				yieldStatement();
				}
				break;
			case 4:
				{
				State = 82;
				returnValueStatement();
				}
				break;
			case 5:
				{
				State = 83;
				returnStatement();
				}
				break;
			case 6:
				{
				State = 84;
				continueStatement();
				}
				break;
			case 7:
				{
				State = 85;
				variableDeclaration();
				}
				break;
			case 8:
				{
				State = 86;
				functionCallStatement();
				}
				break;
			}
			State = 89;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(Ic11Parser.YIELD, 0); }
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYieldStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnValueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Ic11Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnValueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnValueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitReturnValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnValueStatementContext returnValueStatement() {
		ReturnValueStatementContext _localctx = new ReturnValueStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnValueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(RETURN);
			State = 96;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Ic11Parser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(IDENTIFIER);
			State = 101;
			Match(T__4);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 541167976480L) != 0)) {
				{
				State = 102;
				expression(0);
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 103;
					Match(T__5);
					State = 104;
					expression(0);
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 112;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndelimitedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public UndelimitedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undelimitedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUndelimitedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndelimitedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndelimitedStatementContext undelimitedStatement() {
		UndelimitedStatementContext _localctx = new UndelimitedStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_undelimitedStatement);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				whileStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Ic11Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(WHILE);
			State = 119;
			Match(T__4);
			State = 120;
			expression(0);
			State = 121;
			Match(T__6);
			State = 124;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 122;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case VAR:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				{
				State = 123;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Ic11Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Ic11Parser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(IF);
			State = 127;
			Match(T__4);
			State = 128;
			expression(0);
			State = 129;
			Match(T__6);
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				{
				State = 130;
				block();
				}
				break;
			case WHILE:
			case IF:
			case YIELD:
			case RETURN:
			case CONTINUE:
			case VAR:
			case DEVICE_WITH_ID:
			case IDENTIFIER:
				{
				State = 131;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 134;
				Match(ELSE);
				State = 137;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
					{
					State = 135;
					block();
					}
					break;
				case WHILE:
				case IF:
				case YIELD:
				case RETURN:
				case CONTINUE:
				case VAR:
				case DEVICE_WITH_ID:
				case IDENTIFIER:
					{
					State = 136;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceWithIdAssignmentContext : ParserRuleContext {
		public ExpressionContext idExpr;
		public ExpressionContext valueExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DeviceWithIdAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deviceWithIdAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceWithIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceWithIdAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceWithIdAssignmentContext deviceWithIdAssignment() {
		DeviceWithIdAssignmentContext _localctx = new DeviceWithIdAssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_deviceWithIdAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(DEVICE_WITH_ID);
			State = 142;
			Match(T__4);
			State = 143;
			_localctx.idExpr = expression(0);
			State = 144;
			Match(T__6);
			State = 145;
			Match(T__9);
			State = 146;
			Match(IDENTIFIER);
			State = 147;
			Match(T__10);
			State = 148;
			_localctx.valueExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(IDENTIFIER);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 151;
				Match(T__9);
				State = 152;
				Match(IDENTIFIER);
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			Match(T__10);
			State = 159;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(Ic11Parser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(VAR);
			State = 162;
			Match(IDENTIFIER);
			State = 163;
			Match(T__10);
			State = 164;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOpContext : ExpressionContext {
		public IToken op;
		public ExpressionContext operand;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATION() { return GetToken(Ic11Parser.NEGATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		public UnaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitUnaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public IdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(Ic11Parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(Ic11Parser.IDENTIFIER, i);
		}
		public MemberAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralContext : ExpressionContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(Ic11Parser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(Ic11Parser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(Ic11Parser.REAL, 0); }
		public LiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeviceIdAccessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEVICE_WITH_ID() { return GetToken(Ic11Parser.DEVICE_WITH_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		public DeviceIdAccessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitDeviceIdAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeviceIdAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(Ic11Parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(Ic11Parser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Ic11Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(Ic11Parser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Ic11Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(Ic11Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(Ic11Parser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(Ic11Parser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(Ic11Parser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(Ic11Parser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(Ic11Parser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(Ic11Parser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(Ic11Parser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(Ic11Parser.OR, 0); }
		public BinaryOpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.EnterBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIc11Listener typedListener = listener as IIc11Listener;
			if (typedListener != null) typedListener.ExitBinaryOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIc11Visitor<TResult> typedVisitor = visitor as IIc11Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				_localctx = new UnaryOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 167;
				((UnaryOpContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SUB || _la==NEGATION) ) {
					((UnaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 168;
				((UnaryOpContext)_localctx).operand = expression(12);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169;
				Match(T__4);
				State = 170;
				expression(0);
				State = 171;
				Match(T__6);
				}
				break;
			case 3:
				{
				_localctx = new LiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173;
				((LiteralContext)_localctx).type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 446676598784L) != 0)) ) {
					((LiteralContext)_localctx).type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 174;
				Match(IDENTIFIER);
				State = 175;
				Match(T__4);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 541167976480L) != 0)) {
					{
					State = 176;
					expression(0);
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 177;
						Match(T__5);
						State = 178;
						expression(0);
						}
						}
						State = 183;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 186;
				Match(T__6);
				}
				break;
			case 5:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187;
				Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				_localctx = new MemberAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188;
				Match(IDENTIFIER);
				State = 189;
				Match(T__9);
				State = 190;
				Match(IDENTIFIER);
				}
				break;
			case 7:
				{
				_localctx = new DeviceIdAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191;
				Match(DEVICE_WITH_ID);
				State = 192;
				Match(T__4);
				State = 193;
				expression(0);
				State = 194;
				Match(T__6);
				State = 195;
				Match(T__9);
				State = 196;
				Match(IDENTIFIER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 215;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 200;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 201;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 29360128L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 202;
						((BinaryOpContext)_localctx).right = expression(12);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 203;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 204;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 205;
						((BinaryOpContext)_localctx).right = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 207;
						((BinaryOpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6945767424L) != 0)) ) {
							((BinaryOpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 208;
						((BinaryOpContext)_localctx).right = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 209;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 210;
						((BinaryOpContext)_localctx).op = Match(AND);
						State = 211;
						((BinaryOpContext)_localctx).right = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryOpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 213;
						((BinaryOpContext)_localctx).op = Match(OR);
						State = 214;
						((BinaryOpContext)_localctx).right = expression(8);
						}
						break;
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,40,221,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,5,0,39,8,0,10,0,12,0,42,9,0,1,0,
		1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,57,8,2,10,2,12,2,60,
		9,2,3,2,62,8,2,1,2,1,2,1,2,1,3,1,3,5,3,69,8,3,10,3,12,3,72,9,3,1,3,1,3,
		1,4,1,4,3,4,78,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,88,8,5,1,5,1,5,
		1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,5,10,106,
		8,10,10,10,12,10,109,9,10,3,10,111,8,10,1,10,1,10,1,11,1,11,3,11,117,8,
		11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,125,8,12,1,13,1,13,1,13,1,13,1,13,
		1,13,3,13,133,8,13,1,13,1,13,1,13,3,13,138,8,13,3,13,140,8,13,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,154,8,15,10,15,
		12,15,157,9,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,180,8,17,10,17,
		12,17,183,9,17,3,17,185,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,3,17,199,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,216,8,17,10,17,12,17,219,9,17,
		1,17,0,1,34,18,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,0,6,1,
		0,3,4,2,0,21,21,33,33,2,0,35,35,37,38,1,0,22,24,1,0,20,21,2,0,25,28,31,
		32,236,0,40,1,0,0,0,2,45,1,0,0,0,4,50,1,0,0,0,6,66,1,0,0,0,8,77,1,0,0,
		0,10,87,1,0,0,0,12,91,1,0,0,0,14,93,1,0,0,0,16,95,1,0,0,0,18,98,1,0,0,
		0,20,100,1,0,0,0,22,116,1,0,0,0,24,118,1,0,0,0,26,126,1,0,0,0,28,141,1,
		0,0,0,30,150,1,0,0,0,32,161,1,0,0,0,34,198,1,0,0,0,36,39,3,2,1,0,37,39,
		3,4,2,0,38,36,1,0,0,0,38,37,1,0,0,0,39,42,1,0,0,0,40,38,1,0,0,0,40,41,
		1,0,0,0,41,43,1,0,0,0,42,40,1,0,0,0,43,44,5,0,0,1,44,1,1,0,0,0,45,46,5,
		1,0,0,46,47,5,36,0,0,47,48,5,12,0,0,48,49,5,2,0,0,49,3,1,0,0,0,50,51,7,
		0,0,0,51,52,5,36,0,0,52,61,5,5,0,0,53,58,5,36,0,0,54,55,5,6,0,0,55,57,
		5,36,0,0,56,54,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,62,
		1,0,0,0,60,58,1,0,0,0,61,53,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,
		5,7,0,0,64,65,3,6,3,0,65,5,1,0,0,0,66,70,5,8,0,0,67,69,3,8,4,0,68,67,1,
		0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,70,1,
		0,0,0,73,74,5,9,0,0,74,7,1,0,0,0,75,78,3,10,5,0,76,78,3,22,11,0,77,75,
		1,0,0,0,77,76,1,0,0,0,78,9,1,0,0,0,79,88,3,28,14,0,80,88,3,30,15,0,81,
		88,3,12,6,0,82,88,3,16,8,0,83,88,3,14,7,0,84,88,3,18,9,0,85,88,3,32,16,
		0,86,88,3,20,10,0,87,79,1,0,0,0,87,80,1,0,0,0,87,81,1,0,0,0,87,82,1,0,
		0,0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,89,1,0,
		0,0,89,90,5,2,0,0,90,11,1,0,0,0,91,92,5,16,0,0,92,13,1,0,0,0,93,94,5,17,
		0,0,94,15,1,0,0,0,95,96,5,17,0,0,96,97,3,34,17,0,97,17,1,0,0,0,98,99,5,
		18,0,0,99,19,1,0,0,0,100,101,5,36,0,0,101,110,5,5,0,0,102,107,3,34,17,
		0,103,104,5,6,0,0,104,106,3,34,17,0,105,103,1,0,0,0,106,109,1,0,0,0,107,
		105,1,0,0,0,107,108,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,110,102,1,
		0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,113,5,7,0,0,113,21,1,0,0,0,114,
		117,3,24,12,0,115,117,3,26,13,0,116,114,1,0,0,0,116,115,1,0,0,0,117,23,
		1,0,0,0,118,119,5,13,0,0,119,120,5,5,0,0,120,121,3,34,17,0,121,124,5,7,
		0,0,122,125,3,6,3,0,123,125,3,8,4,0,124,122,1,0,0,0,124,123,1,0,0,0,125,
		25,1,0,0,0,126,127,5,14,0,0,127,128,5,5,0,0,128,129,3,34,17,0,129,132,
		5,7,0,0,130,133,3,6,3,0,131,133,3,8,4,0,132,130,1,0,0,0,132,131,1,0,0,
		0,133,139,1,0,0,0,134,137,5,15,0,0,135,138,3,6,3,0,136,138,3,8,4,0,137,
		135,1,0,0,0,137,136,1,0,0,0,138,140,1,0,0,0,139,134,1,0,0,0,139,140,1,
		0,0,0,140,27,1,0,0,0,141,142,5,34,0,0,142,143,5,5,0,0,143,144,3,34,17,
		0,144,145,5,7,0,0,145,146,5,10,0,0,146,147,5,36,0,0,147,148,5,11,0,0,148,
		149,3,34,17,0,149,29,1,0,0,0,150,155,5,36,0,0,151,152,5,10,0,0,152,154,
		5,36,0,0,153,151,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,
		0,156,158,1,0,0,0,157,155,1,0,0,0,158,159,5,11,0,0,159,160,3,34,17,0,160,
		31,1,0,0,0,161,162,5,19,0,0,162,163,5,36,0,0,163,164,5,11,0,0,164,165,
		3,34,17,0,165,33,1,0,0,0,166,167,6,17,-1,0,167,168,7,1,0,0,168,199,3,34,
		17,12,169,170,5,5,0,0,170,171,3,34,17,0,171,172,5,7,0,0,172,199,1,0,0,
		0,173,199,7,2,0,0,174,175,5,36,0,0,175,184,5,5,0,0,176,181,3,34,17,0,177,
		178,5,6,0,0,178,180,3,34,17,0,179,177,1,0,0,0,180,183,1,0,0,0,181,179,
		1,0,0,0,181,182,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,184,176,1,0,0,
		0,184,185,1,0,0,0,185,186,1,0,0,0,186,199,5,7,0,0,187,199,5,36,0,0,188,
		189,5,36,0,0,189,190,5,10,0,0,190,199,5,36,0,0,191,192,5,34,0,0,192,193,
		5,5,0,0,193,194,3,34,17,0,194,195,5,7,0,0,195,196,5,10,0,0,196,197,5,36,
		0,0,197,199,1,0,0,0,198,166,1,0,0,0,198,169,1,0,0,0,198,173,1,0,0,0,198,
		174,1,0,0,0,198,187,1,0,0,0,198,188,1,0,0,0,198,191,1,0,0,0,199,217,1,
		0,0,0,200,201,10,11,0,0,201,202,7,3,0,0,202,216,3,34,17,12,203,204,10,
		10,0,0,204,205,7,4,0,0,205,216,3,34,17,11,206,207,10,9,0,0,207,208,7,5,
		0,0,208,216,3,34,17,10,209,210,10,8,0,0,210,211,5,29,0,0,211,216,3,34,
		17,9,212,213,10,7,0,0,213,214,5,30,0,0,214,216,3,34,17,8,215,200,1,0,0,
		0,215,203,1,0,0,0,215,206,1,0,0,0,215,209,1,0,0,0,215,212,1,0,0,0,216,
		219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,35,1,0,0,0,219,217,1,0,
		0,0,20,38,40,58,61,70,77,87,107,110,116,124,132,137,139,155,181,184,198,
		215,217
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
